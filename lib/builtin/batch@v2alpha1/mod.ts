export * from "./structs.ts";

// Autogenerated API file for BatchV2alpha1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as BatchV2alpha1 from "./structs.ts";

export class BatchV2alpha1Api {
  #client: c.RestClient;
  #root = "/apis/batch/v2alpha1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string) {
    return new BatchV2alpha1NamespacedApi(this.#client, name);
  }
  myNamespace() {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new BatchV2alpha1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getCronJobListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJobList(resp);
  }

  async watchCronJobListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BatchV2alpha1.toCronJob, MetaV1.toStatus));
  }

}

export class BatchV2alpha1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/batch/v2alpha1/namespaces/${namespace}/`;
  }

  async getCronJobList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJobList(resp);
  }

  async watchCronJobList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BatchV2alpha1.toCronJob, MetaV1.toStatus));
  }

  async createCronJob(body: BatchV2alpha1.CronJob, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BatchV2alpha1.fromCronJob(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async deleteCronJobList(body: MetaV1.DeleteOptions, opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}cronjobs`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJobList(resp);
  }

  async getCronJob(name: string, opts: operations.GetOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs/${name}`,
      expectJson: true,
      querystring: operations.formatGetOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async deleteCronJob(name: string, body: MetaV1.DeleteOptions, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}cronjobs/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async replaceCronJob(name: string, body: BatchV2alpha1.CronJob, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}cronjobs/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BatchV2alpha1.fromCronJob(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async patchCronJob(name: string, body: MetaV1.Patch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}cronjobs/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      bodyJson: MetaV1.fromPatch(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async getCronJobStatus(name: string, opts: {
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}cronjobs/${name}/status`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async replaceCronJobStatus(name: string, body: BatchV2alpha1.CronJob, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}cronjobs/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BatchV2alpha1.fromCronJob(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

  async patchCronJobStatus(name: string, body: MetaV1.Patch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}cronjobs/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      bodyJson: MetaV1.fromPatch(body),
      abortSignal: opts.abortSignal,
    });
    return BatchV2alpha1.toCronJob(resp);
  }

}
