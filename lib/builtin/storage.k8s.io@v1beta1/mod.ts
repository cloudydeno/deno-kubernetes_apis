export * from "./structs.ts";

// Autogenerated API file for StorageV1beta1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as StorageV1beta1 from "./structs.ts";

export class StorageV1beta1Api {
  #client: c.RestClient;
  #root = "/apis/storage.k8s.io/v1beta1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string) {
    return new StorageV1beta1NamespacedApi(this.#client, name);
  }
  myNamespace() {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new StorageV1beta1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getCSIStorageCapacityListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacityList(resp);
  }

  async watchCSIStorageCapacityListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1beta1.toCSIStorageCapacity, MetaV1.toStatus));
  }

}

export class StorageV1beta1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/storage.k8s.io/v1beta1/namespaces/${namespace}/`;
  }

  async getCSIStorageCapacityList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacityList(resp);
  }

  async watchCSIStorageCapacityList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1beta1.toCSIStorageCapacity, MetaV1.toStatus));
  }

  async createCSIStorageCapacity(body: StorageV1beta1.CSIStorageCapacity, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1beta1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacity(resp);
  }

  async deleteCSIStorageCapacityList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacityList(resp);
  }

  async getCSIStorageCapacity(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacity(resp);
  }

  async deleteCSIStorageCapacity(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1beta1.toCSIStorageCapacity(resp);
  }

  async replaceCSIStorageCapacity(name: string, body: StorageV1beta1.CSIStorageCapacity, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1beta1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacity(resp);
  }

  async patchCSIStorageCapacity(name: string, type: c.PatchType, body: StorageV1beta1.CSIStorageCapacity | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1beta1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1beta1.toCSIStorageCapacity(resp);
  }

}
