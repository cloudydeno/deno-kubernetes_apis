export * from "./structs.ts";

// Autogenerated API file for ResourceV1beta1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as ResourceV1beta1 from "./structs.ts";

export class ResourceV1beta1Api {
  #client: c.RestClient;
  #root = "/apis/resource.k8s.io/v1beta1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): ResourceV1beta1NamespacedApi {
    return new ResourceV1beta1NamespacedApi(this.#client, name);
  }
  myNamespace(): ResourceV1beta1NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new ResourceV1beta1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getDeviceClassList(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.DeviceClassList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}deviceclasses`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClassList(resp);
  }

  async watchDeviceClassList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.DeviceClass>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}deviceclasses`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toDeviceClass, MetaV1.toStatus));
  }

  async createDeviceClass(
    body: ResourceV1beta1.DeviceClass,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.DeviceClass> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}deviceclasses`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromDeviceClass(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClass(resp);
  }

  async deleteDeviceClassList(
    opts: operations.DeleteListOpts = {},
  ): Promise<ResourceV1beta1.DeviceClassList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}deviceclasses`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClassList(resp);
  }

  async getDeviceClass(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<ResourceV1beta1.DeviceClass> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}deviceclasses/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClass(resp);
  }

  async deleteDeviceClass(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<ResourceV1beta1.DeviceClass | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}deviceclasses/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ResourceV1beta1.toDeviceClass(resp);
  }

  async replaceDeviceClass(
    name: string,
    body: ResourceV1beta1.DeviceClass,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.DeviceClass> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}deviceclasses/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromDeviceClass(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClass(resp);
  }

  async patchDeviceClass(
    name: string,
    type: c.PatchType,
    body: ResourceV1beta1.DeviceClass | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<ResourceV1beta1.DeviceClass> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}deviceclasses/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ResourceV1beta1.fromDeviceClass(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toDeviceClass(resp);
  }

  async getResourceClaimListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimList(resp);
  }

  async watchResourceClaimListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.ResourceClaim>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toResourceClaim, MetaV1.toStatus));
  }

  async getResourceClaimTemplateListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplateList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplateList(resp);
  }

  async watchResourceClaimTemplateListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.ResourceClaimTemplate>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toResourceClaimTemplate, MetaV1.toStatus));
  }

  async getResourceSliceList(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.ResourceSliceList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceslices`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSliceList(resp);
  }

  async watchResourceSliceList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.ResourceSlice>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceslices`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toResourceSlice, MetaV1.toStatus));
  }

  async createResourceSlice(
    body: ResourceV1beta1.ResourceSlice,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceSlice> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}resourceslices`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceSlice(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSlice(resp);
  }

  async deleteResourceSliceList(
    opts: operations.DeleteListOpts = {},
  ): Promise<ResourceV1beta1.ResourceSliceList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceslices`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSliceList(resp);
  }

  async getResourceSlice(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<ResourceV1beta1.ResourceSlice> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceslices/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSlice(resp);
  }

  async deleteResourceSlice(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<ResourceV1beta1.ResourceSlice | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceslices/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ResourceV1beta1.toResourceSlice(resp);
  }

  async replaceResourceSlice(
    name: string,
    body: ResourceV1beta1.ResourceSlice,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceSlice> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourceslices/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceSlice(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSlice(resp);
  }

  async patchResourceSlice(
    name: string,
    type: c.PatchType,
    body: ResourceV1beta1.ResourceSlice | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<ResourceV1beta1.ResourceSlice> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourceslices/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ResourceV1beta1.fromResourceSlice(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceSlice(resp);
  }

}

export class ResourceV1beta1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/resource.k8s.io/v1beta1/namespaces/${namespace}/`;
  }

  async getResourceClaimList(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimList(resp);
  }

  async watchResourceClaimList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.ResourceClaim>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toResourceClaim, MetaV1.toStatus));
  }

  async createResourceClaim(
    body: ResourceV1beta1.ResourceClaim,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceClaim(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async deleteResourceClaimList(
    opts: operations.DeleteListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceclaims`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimList(resp);
  }

  async getResourceClaim(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async deleteResourceClaim(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceclaims/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async replaceResourceClaim(
    name: string,
    body: ResourceV1beta1.ResourceClaim,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourceclaims/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceClaim(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async patchResourceClaim(
    name: string,
    type: c.PatchType,
    body: ResourceV1beta1.ResourceClaim | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourceclaims/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ResourceV1beta1.fromResourceClaim(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async getResourceClaimStatus(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaims/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async replaceResourceClaimStatus(
    name: string,
    body: ResourceV1beta1.ResourceClaim,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourceclaims/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceClaim(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async patchResourceClaimStatus(
    name: string,
    type: c.PatchType,
    body: ResourceV1beta1.ResourceClaim | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaim> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourceclaims/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ResourceV1beta1.fromResourceClaim(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaim(resp);
  }

  async getResourceClaimTemplateList(
    opts: operations.GetListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplateList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplateList(resp);
  }

  async watchResourceClaimTemplateList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<ResourceV1beta1.ResourceClaimTemplate>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ResourceV1beta1.toResourceClaimTemplate, MetaV1.toStatus));
  }

  async createResourceClaimTemplate(
    body: ResourceV1beta1.ResourceClaimTemplate,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplate> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceClaimTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplate(resp);
  }

  async deleteResourceClaimTemplateList(
    opts: operations.DeleteListOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplateList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceclaimtemplates`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplateList(resp);
  }

  async getResourceClaimTemplate(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplate> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourceclaimtemplates/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplate(resp);
  }

  async deleteResourceClaimTemplate(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplate | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourceclaimtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ResourceV1beta1.toResourceClaimTemplate(resp);
  }

  async replaceResourceClaimTemplate(
    name: string,
    body: ResourceV1beta1.ResourceClaimTemplate,
    opts: operations.PutOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplate> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourceclaimtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ResourceV1beta1.fromResourceClaimTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplate(resp);
  }

  async patchResourceClaimTemplate(
    name: string,
    type: c.PatchType,
    body: ResourceV1beta1.ResourceClaimTemplate | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<ResourceV1beta1.ResourceClaimTemplate> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourceclaimtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ResourceV1beta1.fromResourceClaimTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return ResourceV1beta1.toResourceClaimTemplate(resp);
  }

}
