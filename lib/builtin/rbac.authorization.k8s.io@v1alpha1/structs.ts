// Autogenerated Schema file for RbacAuthorizationV1alpha1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "rbac.authorization.k8s.io/v1alpha1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole */
export interface AggregationRule {
  clusterRoleSelectors?: Array<MetaV1.LabelSelector> | null;
}
export function toAggregationRule(input: c.JSONValue): AggregationRule {
  const obj = c.checkObj(input);
  return {
    clusterRoleSelectors: c.readOpt(obj["clusterRoleSelectors"], x => c.readList(x, MetaV1.toLabelSelector)),
  }}
export function fromAggregationRule(input: AggregationRule): c.JSONValue {
  return {
    ...input,
    clusterRoleSelectors: input.clusterRoleSelectors?.map(MetaV1.fromLabelSelector),
  }}

/** ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22. */
export interface ClusterRole {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "ClusterRole";
  aggregationRule?: AggregationRule | null;
  metadata?: MetaV1.ObjectMeta | null;
  rules?: Array<PolicyRule> | null;
}
export function toClusterRole(input: c.JSONValue): ClusterRole & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "ClusterRole"),
    aggregationRule: c.readOpt(obj["aggregationRule"], toAggregationRule),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    rules: c.readOpt(obj["rules"], x => c.readList(x, toPolicyRule)),
  }}
export function fromClusterRole(input: ClusterRole): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "rbac.authorization.k8s.io/v1alpha1", "ClusterRole"),
    ...input,
    aggregationRule: input.aggregationRule != null ? fromAggregationRule(input.aggregationRule) : undefined,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    rules: input.rules?.map(fromPolicyRule),
  }}

/** PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. */
export interface PolicyRule {
  apiGroups?: Array<string> | null;
  nonResourceURLs?: Array<string> | null;
  resourceNames?: Array<string> | null;
  resources?: Array<string> | null;
  verbs: Array<string>;
}
export function toPolicyRule(input: c.JSONValue): PolicyRule {
  const obj = c.checkObj(input);
  return {
    apiGroups: c.readOpt(obj["apiGroups"], x => c.readList(x, c.checkStr)),
    nonResourceURLs: c.readOpt(obj["nonResourceURLs"], x => c.readList(x, c.checkStr)),
    resourceNames: c.readOpt(obj["resourceNames"], x => c.readList(x, c.checkStr)),
    resources: c.readOpt(obj["resources"], x => c.readList(x, c.checkStr)),
    verbs: c.readList(obj["verbs"], c.checkStr),
  }}
export function fromPolicyRule(input: PolicyRule): c.JSONValue {
  return {
    ...input,
  }}

/** ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22. */
export interface ClusterRoleBinding {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "ClusterRoleBinding";
  metadata?: MetaV1.ObjectMeta | null;
  roleRef: RoleRef;
  subjects?: Array<Subject> | null;
}
export function toClusterRoleBinding(input: c.JSONValue): ClusterRoleBinding & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "ClusterRoleBinding"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    roleRef: toRoleRef(obj["roleRef"]),
    subjects: c.readOpt(obj["subjects"], x => c.readList(x, toSubject)),
  }}
export function fromClusterRoleBinding(input: ClusterRoleBinding): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "rbac.authorization.k8s.io/v1alpha1", "ClusterRoleBinding"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    roleRef: input.roleRef != null ? fromRoleRef(input.roleRef) : undefined,
    subjects: input.subjects?.map(fromSubject),
  }}

/** RoleRef contains information that points to the role being used */
export interface RoleRef {
  apiGroup: string;
  kind: string;
  name: string;
}
export function toRoleRef(input: c.JSONValue): RoleRef {
  const obj = c.checkObj(input);
  return {
    apiGroup: c.checkStr(obj["apiGroup"]),
    kind: c.checkStr(obj["kind"]),
    name: c.checkStr(obj["name"]),
  }}
export function fromRoleRef(input: RoleRef): c.JSONValue {
  return {
    ...input,
  }}

/** Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names. */
export interface Subject {
  apiVersion?: string | null;
  kind: string;
  name: string;
  namespace?: string | null;
}
export function toSubject(input: c.JSONValue): Subject {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    kind: c.checkStr(obj["kind"]),
    name: c.checkStr(obj["name"]),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
  }}
export function fromSubject(input: Subject): c.JSONValue {
  return {
    ...input,
  }}

/** ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.22. */
export interface ClusterRoleBindingList extends ListOf<ClusterRoleBinding> {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "ClusterRoleBindingList";
};
export function toClusterRoleBindingList(input: c.JSONValue): ClusterRoleBindingList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "ClusterRoleBindingList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toClusterRoleBinding),
  }}

/** ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22. */
export interface ClusterRoleList extends ListOf<ClusterRole> {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "ClusterRoleList";
};
export function toClusterRoleList(input: c.JSONValue): ClusterRoleList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "ClusterRoleList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toClusterRole),
  }}

/** Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22. */
export interface Role {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "Role";
  metadata?: MetaV1.ObjectMeta | null;
  rules?: Array<PolicyRule> | null;
}
export function toRole(input: c.JSONValue): Role & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "Role"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    rules: c.readOpt(obj["rules"], x => c.readList(x, toPolicyRule)),
  }}
export function fromRole(input: Role): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "rbac.authorization.k8s.io/v1alpha1", "Role"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    rules: input.rules?.map(fromPolicyRule),
  }}

/** RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22. */
export interface RoleBinding {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "RoleBinding";
  metadata?: MetaV1.ObjectMeta | null;
  roleRef: RoleRef;
  subjects?: Array<Subject> | null;
}
export function toRoleBinding(input: c.JSONValue): RoleBinding & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "RoleBinding"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    roleRef: toRoleRef(obj["roleRef"]),
    subjects: c.readOpt(obj["subjects"], x => c.readList(x, toSubject)),
  }}
export function fromRoleBinding(input: RoleBinding): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "rbac.authorization.k8s.io/v1alpha1", "RoleBinding"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    roleRef: input.roleRef != null ? fromRoleRef(input.roleRef) : undefined,
    subjects: input.subjects?.map(fromSubject),
  }}

/** RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22. */
export interface RoleBindingList extends ListOf<RoleBinding> {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "RoleBindingList";
};
export function toRoleBindingList(input: c.JSONValue): RoleBindingList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "RoleBindingList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toRoleBinding),
  }}

/** RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22. */
export interface RoleList extends ListOf<Role> {
  apiVersion?: "rbac.authorization.k8s.io/v1alpha1";
  kind?: "RoleList";
};
export function toRoleList(input: c.JSONValue): RoleList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "rbac.authorization.k8s.io/v1alpha1", "RoleList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toRole),
  }}
