// Autogenerated Schema file for CertificatesV1beta1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "certificates.k8s.io/v1beta1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** Describes a certificate signing request */
export type CertificateSigningRequest = Kind<"CertificateSigningRequest"> & CertificateSigningRequestFields;
export interface CertificateSigningRequestFields {
  metadata?: MetaV1.ObjectMeta | null;
  spec?: CertificateSigningRequestSpec | null;
  status?: CertificateSigningRequestStatus | null;
}
export function toCertificateSigningRequestFields(input: c.JSONValue): CertificateSigningRequestFields {
  const obj = c.checkObj(input);
  return {
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toCertificateSigningRequestSpec),
    status: c.readOpt(obj["status"], toCertificateSigningRequestStatus),
  }}
export function toCertificateSigningRequest(input: c.JSONValue): CertificateSigningRequest {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "certificates.k8s.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "CertificateSigningRequest") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toCertificateSigningRequestFields(fields),
  }}
export function fromCertificateSigningRequest(input: CertificateSigningRequest): c.JSONValue {
  return {
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromCertificateSigningRequestSpec(input.spec) : undefined,
    status: input.status != null ? fromCertificateSigningRequestStatus(input.status) : undefined,
  }}

/** This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users. */
export interface CertificateSigningRequestSpec {
  extra?: Record<string,Array<string>> | null;
  groups?: Array<string> | null;
  request: string;
  signerName?: string | null;
  uid?: string | null;
  usages?: Array<string> | null;
  username?: string | null;
}
export function toCertificateSigningRequestSpec(input: c.JSONValue): CertificateSigningRequestSpec {
  const obj = c.checkObj(input);
  return {
    extra: c.readOpt(obj["extra"], y => c.readMap(y, x => c.readList(x, c.checkStr))),
    groups: c.readOpt(obj["groups"], x => c.readList(x, c.checkStr)),
    request: c.checkStr(obj["request"]),
    signerName: c.readOpt(obj["signerName"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
    usages: c.readOpt(obj["usages"], x => c.readList(x, c.checkStr)),
    username: c.readOpt(obj["username"], c.checkStr),
  }}
export function fromCertificateSigningRequestSpec(input: CertificateSigningRequestSpec): c.JSONValue {
  return {
    ...input,
  }}

export interface CertificateSigningRequestStatus {
  certificate?: string | null;
  conditions?: Array<CertificateSigningRequestCondition> | null;
}
export function toCertificateSigningRequestStatus(input: c.JSONValue): CertificateSigningRequestStatus {
  const obj = c.checkObj(input);
  return {
    certificate: c.readOpt(obj["certificate"], c.checkStr),
    conditions: c.readOpt(obj["conditions"], x => c.readList(x, toCertificateSigningRequestCondition)),
  }}
export function fromCertificateSigningRequestStatus(input: CertificateSigningRequestStatus): c.JSONValue {
  return {
    ...input,
    conditions: input.conditions?.map(fromCertificateSigningRequestCondition),
  }}

export interface CertificateSigningRequestCondition {
  lastTransitionTime?: c.Time | null;
  lastUpdateTime?: c.Time | null;
  message?: string | null;
  reason?: string | null;
  status?: string | null;
  type: string;
}
export function toCertificateSigningRequestCondition(input: c.JSONValue): CertificateSigningRequestCondition {
  const obj = c.checkObj(input);
  return {
    lastTransitionTime: c.readOpt(obj["lastTransitionTime"], c.toTime),
    lastUpdateTime: c.readOpt(obj["lastUpdateTime"], c.toTime),
    message: c.readOpt(obj["message"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
    status: c.readOpt(obj["status"], c.checkStr),
    type: c.checkStr(obj["type"]),
  }}
export function fromCertificateSigningRequestCondition(input: CertificateSigningRequestCondition): c.JSONValue {
  return {
    ...input,
    lastTransitionTime: input.lastTransitionTime != null ? c.fromTime(input.lastTransitionTime) : undefined,
    lastUpdateTime: input.lastUpdateTime != null ? c.fromTime(input.lastUpdateTime) : undefined,
  }}

export type CertificateSigningRequestList = Kind<"CertificateSigningRequestList"> & ListOf<CertificateSigningRequestFields>;
export function toCertificateSigningRequestList(input: c.JSONValue): CertificateSigningRequestList {
  const {apiVersion, kind, metadata, items} = c.checkObj(input);
  if (apiVersion !== "certificates.k8s.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "CertificateSigningRequestList") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    metadata: MetaV1.toListMeta(metadata),
    items: c.readList(items, toCertificateSigningRequestFields),
  }}
