export * from "./structs.ts";

// Autogenerated API file for CertificatesV1beta1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as CertificatesV1beta1 from "./structs.ts";

export class CertificatesV1beta1Api {
  #client: c.RestClient;
  #root = "/apis/certificates.k8s.io/v1beta1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getCertificateSigningRequestList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}certificatesigningrequests`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequestList(resp);
  }

  async watchCertificateSigningRequestList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}certificatesigningrequests`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CertificatesV1beta1.toCertificateSigningRequest, MetaV1.toStatus));
  }

  async createCertificateSigningRequest(body: CertificatesV1beta1.CertificateSigningRequest, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}certificatesigningrequests`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async deleteCertificateSigningRequestList(body: MetaV1.DeleteOptions, opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}certificatesigningrequests`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequestList(resp);
  }

  async getCertificateSigningRequest(name: string, opts: operations.GetOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}certificatesigningrequests/${name}`,
      expectJson: true,
      querystring: operations.formatGetOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async deleteCertificateSigningRequest(name: string, body: MetaV1.DeleteOptions, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}certificatesigningrequests/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async replaceCertificateSigningRequest(name: string, body: CertificatesV1beta1.CertificateSigningRequest, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}certificatesigningrequests/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async patchCertificateSigningRequest(name: string, type: c.PatchType, body: CertificatesV1beta1.CertificateSigningRequest | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}certificatesigningrequests/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async getCertificateSigningRequestApproval(name: string, opts: {
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}certificatesigningrequests/${name}/approval`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async replaceCertificateSigningRequestApproval(name: string, body: CertificatesV1beta1.CertificateSigningRequest, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}certificatesigningrequests/${name}/approval`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async patchCertificateSigningRequestApproval(name: string, type: c.PatchType, body: CertificatesV1beta1.CertificateSigningRequest | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}certificatesigningrequests/${name}/approval`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async getCertificateSigningRequestStatus(name: string, opts: {
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}certificatesigningrequests/${name}/status`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async replaceCertificateSigningRequestStatus(name: string, body: CertificatesV1beta1.CertificateSigningRequest, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}certificatesigningrequests/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

  async patchCertificateSigningRequestStatus(name: string, type: c.PatchType, body: CertificatesV1beta1.CertificateSigningRequest | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}certificatesigningrequests/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CertificatesV1beta1.fromCertificateSigningRequest(body),
      abortSignal: opts.abortSignal,
    });
    return CertificatesV1beta1.toCertificateSigningRequest(resp);
  }

}
