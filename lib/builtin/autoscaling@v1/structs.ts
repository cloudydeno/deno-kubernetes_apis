// Autogenerated Schema file for AutoscalingV1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "autoscaling/v1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** CrossVersionObjectReference contains enough information to let you identify the referred resource. */
export interface CrossVersionObjectReference {
  apiVersion?: string | null;
  kind: string;
  name: string;
}
export function toCrossVersionObjectReference(input: c.JSONValue): CrossVersionObjectReference {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    kind: c.checkStr(obj["kind"]),
    name: c.checkStr(obj["name"]),
  }}
export function fromCrossVersionObjectReference(input: CrossVersionObjectReference): c.JSONValue {
  return {
    ...input,
  }}

/** configuration of a horizontal pod autoscaler. */
export type HorizontalPodAutoscaler = Kind<"HorizontalPodAutoscaler"> & HorizontalPodAutoscalerFields;
export interface HorizontalPodAutoscalerFields {
  metadata?: MetaV1.ObjectMeta | null;
  spec?: HorizontalPodAutoscalerSpec | null;
  status?: HorizontalPodAutoscalerStatus | null;
}
export function toHorizontalPodAutoscalerFields(input: c.JSONValue): HorizontalPodAutoscalerFields {
  const obj = c.checkObj(input);
  return {
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toHorizontalPodAutoscalerSpec),
    status: c.readOpt(obj["status"], toHorizontalPodAutoscalerStatus),
  }}
export function toHorizontalPodAutoscaler(input: c.JSONValue): HorizontalPodAutoscaler {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "autoscaling/v1") throw new Error("Type apiv mis 2");
  if (kind !== "HorizontalPodAutoscaler") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toHorizontalPodAutoscalerFields(fields),
  }}
export function fromHorizontalPodAutoscaler(input: HorizontalPodAutoscaler): c.JSONValue {
  return {
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromHorizontalPodAutoscalerSpec(input.spec) : undefined,
    status: input.status != null ? fromHorizontalPodAutoscalerStatus(input.status) : undefined,
  }}

/** specification of a horizontal pod autoscaler. */
export interface HorizontalPodAutoscalerSpec {
  maxReplicas: number;
  minReplicas?: number | null;
  scaleTargetRef: CrossVersionObjectReference;
  targetCPUUtilizationPercentage?: number | null;
}
export function toHorizontalPodAutoscalerSpec(input: c.JSONValue): HorizontalPodAutoscalerSpec {
  const obj = c.checkObj(input);
  return {
    maxReplicas: c.checkNum(obj["maxReplicas"]),
    minReplicas: c.readOpt(obj["minReplicas"], c.checkNum),
    scaleTargetRef: toCrossVersionObjectReference(obj["scaleTargetRef"]),
    targetCPUUtilizationPercentage: c.readOpt(obj["targetCPUUtilizationPercentage"], c.checkNum),
  }}
export function fromHorizontalPodAutoscalerSpec(input: HorizontalPodAutoscalerSpec): c.JSONValue {
  return {
    ...input,
    scaleTargetRef: input.scaleTargetRef != null ? fromCrossVersionObjectReference(input.scaleTargetRef) : undefined,
  }}

/** current status of a horizontal pod autoscaler */
export interface HorizontalPodAutoscalerStatus {
  currentCPUUtilizationPercentage?: number | null;
  currentReplicas: number;
  desiredReplicas: number;
  lastScaleTime?: c.Time | null;
  observedGeneration?: number | null;
}
export function toHorizontalPodAutoscalerStatus(input: c.JSONValue): HorizontalPodAutoscalerStatus {
  const obj = c.checkObj(input);
  return {
    currentCPUUtilizationPercentage: c.readOpt(obj["currentCPUUtilizationPercentage"], c.checkNum),
    currentReplicas: c.checkNum(obj["currentReplicas"]),
    desiredReplicas: c.checkNum(obj["desiredReplicas"]),
    lastScaleTime: c.readOpt(obj["lastScaleTime"], c.toTime),
    observedGeneration: c.readOpt(obj["observedGeneration"], c.checkNum),
  }}
export function fromHorizontalPodAutoscalerStatus(input: HorizontalPodAutoscalerStatus): c.JSONValue {
  return {
    ...input,
    lastScaleTime: input.lastScaleTime != null ? c.fromTime(input.lastScaleTime) : undefined,
  }}

/** list of horizontal pod autoscaler objects. */
export type HorizontalPodAutoscalerList = Kind<"HorizontalPodAutoscalerList"> & ListOf<HorizontalPodAutoscalerFields>;
export function toHorizontalPodAutoscalerList(input: c.JSONValue): HorizontalPodAutoscalerList {
  const {apiVersion, kind, metadata, items} = c.checkObj(input);
  if (apiVersion !== "autoscaling/v1") throw new Error("Type apiv mis 2");
  if (kind !== "HorizontalPodAutoscalerList") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    metadata: MetaV1.toListMeta(metadata),
    items: c.readList(items, toHorizontalPodAutoscalerFields),
  }}

/** Scale represents a scaling request for a resource. */
export interface Scale {
  apiVersion?: string | null;
  kind?: string | null;
  metadata?: MetaV1.ObjectMeta | null;
  spec?: ScaleSpec | null;
  status?: ScaleStatus | null;
}
export function toScale(input: c.JSONValue): Scale {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toScaleSpec),
    status: c.readOpt(obj["status"], toScaleStatus),
  }}
export function fromScale(input: Scale): c.JSONValue {
  return {
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromScaleSpec(input.spec) : undefined,
    status: input.status != null ? fromScaleStatus(input.status) : undefined,
  }}

/** ScaleSpec describes the attributes of a scale subresource. */
export interface ScaleSpec {
  replicas?: number | null;
}
export function toScaleSpec(input: c.JSONValue): ScaleSpec {
  const obj = c.checkObj(input);
  return {
    replicas: c.readOpt(obj["replicas"], c.checkNum),
  }}
export function fromScaleSpec(input: ScaleSpec): c.JSONValue {
  return {
    ...input,
  }}

/** ScaleStatus represents the current status of a scale subresource. */
export interface ScaleStatus {
  replicas: number;
  selector?: string | null;
}
export function toScaleStatus(input: c.JSONValue): ScaleStatus {
  const obj = c.checkObj(input);
  return {
    replicas: c.checkNum(obj["replicas"]),
    selector: c.readOpt(obj["selector"], c.checkStr),
  }}
export function fromScaleStatus(input: ScaleStatus): c.JSONValue {
  return {
    ...input,
  }}
