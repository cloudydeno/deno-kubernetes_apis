export * from "./structs.ts";

// Autogenerated API file for AutoscalingV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as AutoscalingV1 from "./structs.ts";

export class AutoscalingV1Api {
  #client: c.RestClient;
  #root = "/apis/autoscaling/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): AutoscalingV1NamespacedApi {
    return new AutoscalingV1NamespacedApi(this.#client, name);
  }
  myNamespace(): AutoscalingV1NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new AutoscalingV1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getHorizontalPodAutoscalerListForAllNamespaces(opts: operations.GetListOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscalerList(resp);
  }

  async watchHorizontalPodAutoscalerListForAllNamespaces(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<AutoscalingV1.HorizontalPodAutoscaler & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AutoscalingV1.toHorizontalPodAutoscaler, MetaV1.toStatus));
  }

}

export class AutoscalingV1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/autoscaling/v1/namespaces/${namespace}/`;
  }

  async getHorizontalPodAutoscalerList(opts: operations.GetListOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscalerList(resp);
  }

  async watchHorizontalPodAutoscalerList(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<AutoscalingV1.HorizontalPodAutoscaler & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AutoscalingV1.toHorizontalPodAutoscaler, MetaV1.toStatus));
  }

  async createHorizontalPodAutoscaler(body: AutoscalingV1.HorizontalPodAutoscaler, opts: operations.PutOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV1.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async deleteHorizontalPodAutoscalerList(opts: operations.DeleteListOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscalerList(resp);
  }

  async getHorizontalPodAutoscaler(name: string, opts: operations.NoOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async deleteHorizontalPodAutoscaler(name: string, opts: operations.DeleteOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async replaceHorizontalPodAutoscaler(name: string, body: AutoscalingV1.HorizontalPodAutoscaler, opts: operations.PutOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV1.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async patchHorizontalPodAutoscaler(name: string, type: c.PatchType, body: AutoscalingV1.HorizontalPodAutoscaler | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AutoscalingV1.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async getHorizontalPodAutoscalerStatus(name: string, opts: operations.NoOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async replaceHorizontalPodAutoscalerStatus(name: string, body: AutoscalingV1.HorizontalPodAutoscaler, opts: operations.PutOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV1.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

  async patchHorizontalPodAutoscalerStatus(name: string, type: c.PatchType, body: AutoscalingV1.HorizontalPodAutoscaler | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<AutoscalingV1.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AutoscalingV1.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toHorizontalPodAutoscaler(resp);
  }

}
