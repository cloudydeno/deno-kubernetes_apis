// Autogenerated Schema file for ApiregistrationV1beta1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "apiregistration.k8s.io/v1beta1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** APIService represents a server for a particular GroupVersion. Name must be "version.group". */
export interface APIService {
  apiVersion?: "apiregistration.k8s.io/v1beta1";
  kind?: "APIService";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: APIServiceSpec | null;
  status?: APIServiceStatus | null;
}
export function toAPIService(input: c.JSONValue): APIService & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "apiregistration.k8s.io/v1beta1", "APIService"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toAPIServiceSpec),
    status: c.readOpt(obj["status"], toAPIServiceStatus),
  }}
export function fromAPIService(input: APIService): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "apiregistration.k8s.io/v1beta1", "APIService"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromAPIServiceSpec(input.spec) : undefined,
    status: input.status != null ? fromAPIServiceStatus(input.status) : undefined,
  }}

/** APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification. */
export interface APIServiceSpec {
  caBundle?: string | null;
  group?: string | null;
  groupPriorityMinimum: number;
  insecureSkipTLSVerify?: boolean | null;
  service?: ServiceReference | null;
  version?: string | null;
  versionPriority: number;
}
export function toAPIServiceSpec(input: c.JSONValue): APIServiceSpec {
  const obj = c.checkObj(input);
  return {
    caBundle: c.readOpt(obj["caBundle"], c.checkStr),
    group: c.readOpt(obj["group"], c.checkStr),
    groupPriorityMinimum: c.checkNum(obj["groupPriorityMinimum"]),
    insecureSkipTLSVerify: c.readOpt(obj["insecureSkipTLSVerify"], c.checkBool),
    service: c.readOpt(obj["service"], toServiceReference),
    version: c.readOpt(obj["version"], c.checkStr),
    versionPriority: c.checkNum(obj["versionPriority"]),
  }}
export function fromAPIServiceSpec(input: APIServiceSpec): c.JSONValue {
  return {
    ...input,
    service: input.service != null ? fromServiceReference(input.service) : undefined,
  }}

/** ServiceReference holds a reference to Service.legacy.k8s.io */
export interface ServiceReference {
  name?: string | null;
  namespace?: string | null;
  port?: number | null;
}
export function toServiceReference(input: c.JSONValue): ServiceReference {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    port: c.readOpt(obj["port"], c.checkNum),
  }}
export function fromServiceReference(input: ServiceReference): c.JSONValue {
  return {
    ...input,
  }}

/** APIServiceStatus contains derived information about an API server */
export interface APIServiceStatus {
  conditions?: Array<APIServiceCondition> | null;
}
export function toAPIServiceStatus(input: c.JSONValue): APIServiceStatus {
  const obj = c.checkObj(input);
  return {
    conditions: c.readOpt(obj["conditions"], x => c.readList(x, toAPIServiceCondition)),
  }}
export function fromAPIServiceStatus(input: APIServiceStatus): c.JSONValue {
  return {
    ...input,
    conditions: input.conditions?.map(fromAPIServiceCondition),
  }}

/** APIServiceCondition describes the state of an APIService at a particular point */
export interface APIServiceCondition {
  lastTransitionTime?: c.Time | null;
  message?: string | null;
  reason?: string | null;
  status: string;
  type: string;
}
export function toAPIServiceCondition(input: c.JSONValue): APIServiceCondition {
  const obj = c.checkObj(input);
  return {
    lastTransitionTime: c.readOpt(obj["lastTransitionTime"], c.toTime),
    message: c.readOpt(obj["message"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
    status: c.checkStr(obj["status"]),
    type: c.checkStr(obj["type"]),
  }}
export function fromAPIServiceCondition(input: APIServiceCondition): c.JSONValue {
  return {
    ...input,
    lastTransitionTime: input.lastTransitionTime != null ? c.fromTime(input.lastTransitionTime) : undefined,
  }}

/** APIServiceList is a list of APIService objects. */
export interface APIServiceList extends ListOf<APIService> {
  apiVersion?: "apiregistration.k8s.io/v1beta1";
  kind?: "APIServiceList";
};
export function toAPIServiceList(input: c.JSONValue): APIServiceList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "apiregistration.k8s.io/v1beta1", "APIServiceList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toAPIService),
  }}
