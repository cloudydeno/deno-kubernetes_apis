// Autogenerated Schema file for StoragemigrationV1alpha1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** The names of the group, the version, and the resource. */
export interface GroupVersionResource {
  group?: string | null;
  resource?: string | null;
  version?: string | null;
}
export function toGroupVersionResource(input: c.JSONValue): GroupVersionResource {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    resource: c.readOpt(obj["resource"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function fromGroupVersionResource(input: GroupVersionResource): c.JSONValue {
  return {
    ...input,
  }}

/** Describes the state of a migration at a certain point. */
export interface MigrationCondition {
  lastUpdateTime?: c.Time | null;
  message?: string | null;
  reason?: string | null;
  status: string;
  type: string;
}
export function toMigrationCondition(input: c.JSONValue): MigrationCondition {
  const obj = c.checkObj(input);
  return {
    lastUpdateTime: c.readOpt(obj["lastUpdateTime"], c.toTime),
    message: c.readOpt(obj["message"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
    status: c.checkStr(obj["status"]),
    type: c.checkStr(obj["type"]),
  }}
export function fromMigrationCondition(input: MigrationCondition): c.JSONValue {
  return {
    ...input,
    lastUpdateTime: input.lastUpdateTime != null ? c.fromTime(input.lastUpdateTime) : undefined,
  }}

/** StorageVersionMigration represents a migration of stored data to the latest storage version. */
export interface StorageVersionMigration {
  apiVersion?: "storagemigration.k8s.io/v1alpha1";
  kind?: "StorageVersionMigration";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: StorageVersionMigrationSpec | null;
  status?: StorageVersionMigrationStatus | null;
}
export function toStorageVersionMigration(input: c.JSONValue): StorageVersionMigration & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "storagemigration.k8s.io/v1alpha1", "StorageVersionMigration"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toStorageVersionMigrationSpec),
    status: c.readOpt(obj["status"], toStorageVersionMigrationStatus),
  }}
export function fromStorageVersionMigration(input: StorageVersionMigration): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "storagemigration.k8s.io/v1alpha1", "StorageVersionMigration"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromStorageVersionMigrationSpec(input.spec) : undefined,
    status: input.status != null ? fromStorageVersionMigrationStatus(input.status) : undefined,
  }}

/** Spec of the storage version migration. */
export interface StorageVersionMigrationSpec {
  continueToken?: string | null;
  resource: GroupVersionResource;
}
export function toStorageVersionMigrationSpec(input: c.JSONValue): StorageVersionMigrationSpec {
  const obj = c.checkObj(input);
  return {
    continueToken: c.readOpt(obj["continueToken"], c.checkStr),
    resource: toGroupVersionResource(obj["resource"]),
  }}
export function fromStorageVersionMigrationSpec(input: StorageVersionMigrationSpec): c.JSONValue {
  return {
    ...input,
    resource: input.resource != null ? fromGroupVersionResource(input.resource) : undefined,
  }}

/** Status of the storage version migration. */
export interface StorageVersionMigrationStatus {
  conditions?: Array<MigrationCondition> | null;
  resourceVersion?: string | null;
}
export function toStorageVersionMigrationStatus(input: c.JSONValue): StorageVersionMigrationStatus {
  const obj = c.checkObj(input);
  return {
    conditions: c.readOpt(obj["conditions"], x => c.readList(x, toMigrationCondition)),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
  }}
export function fromStorageVersionMigrationStatus(input: StorageVersionMigrationStatus): c.JSONValue {
  return {
    ...input,
    conditions: input.conditions?.map(fromMigrationCondition),
  }}

/** StorageVersionMigrationList is a collection of storage version migrations. */
export interface StorageVersionMigrationList extends ListOf<StorageVersionMigration> {
  apiVersion?: "storagemigration.k8s.io/v1alpha1";
  kind?: "StorageVersionMigrationList";
};
export function toStorageVersionMigrationList(input: c.JSONValue): StorageVersionMigrationList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "storagemigration.k8s.io/v1alpha1", "StorageVersionMigrationList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toStorageVersionMigration),
  }}
