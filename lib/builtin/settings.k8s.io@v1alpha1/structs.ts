// Autogenerated Schema file for SettingsV1alpha1
import * as c from "../../common.ts";

import * as CoreV1 from "../core@v1/structs.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "settings.k8s.io/v1alpha1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** PodPreset is a policy resource that defines additional runtime requirements for a Pod. */
export interface PodPreset {
  apiVersion?: "settings.k8s.io/v1alpha1";
  kind?: "PodPreset";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: PodPresetSpec | null;
}
export function toPodPreset(input: c.JSONValue): PodPreset & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "settings.k8s.io/v1alpha1", "PodPreset"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toPodPresetSpec),
  }}
export function fromPodPreset(input: PodPreset): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "settings.k8s.io/v1alpha1", "PodPreset"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromPodPresetSpec(input.spec) : undefined,
  }}

/** PodPresetSpec is a description of a pod preset. */
export interface PodPresetSpec {
  env?: Array<CoreV1.EnvVar> | null;
  envFrom?: Array<CoreV1.EnvFromSource> | null;
  selector?: MetaV1.LabelSelector | null;
  volumeMounts?: Array<CoreV1.VolumeMount> | null;
  volumes?: Array<CoreV1.Volume> | null;
}
export function toPodPresetSpec(input: c.JSONValue): PodPresetSpec {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, CoreV1.toEnvVar)),
    envFrom: c.readOpt(obj["envFrom"], x => c.readList(x, CoreV1.toEnvFromSource)),
    selector: c.readOpt(obj["selector"], MetaV1.toLabelSelector),
    volumeMounts: c.readOpt(obj["volumeMounts"], x => c.readList(x, CoreV1.toVolumeMount)),
    volumes: c.readOpt(obj["volumes"], x => c.readList(x, CoreV1.toVolume)),
  }}
export function fromPodPresetSpec(input: PodPresetSpec): c.JSONValue {
  return {
    ...input,
    env: input.env?.map(CoreV1.fromEnvVar),
    envFrom: input.envFrom?.map(CoreV1.fromEnvFromSource),
    selector: input.selector != null ? MetaV1.fromLabelSelector(input.selector) : undefined,
    volumeMounts: input.volumeMounts?.map(CoreV1.fromVolumeMount),
    volumes: input.volumes?.map(CoreV1.fromVolume),
  }}

/** PodPresetList is a list of PodPreset objects. */
export interface PodPresetList extends ListOf<PodPreset> {
  apiVersion?: "settings.k8s.io/v1alpha1";
  kind?: "PodPresetList";
};
export function toPodPresetList(input: c.JSONValue): PodPresetList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "settings.k8s.io/v1alpha1", "PodPresetList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toPodPreset),
  }}
