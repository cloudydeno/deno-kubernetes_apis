export * from "./structs.ts";

// Autogenerated API file for SettingsV1alpha1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as SettingsV1alpha1 from "./structs.ts";

export class SettingsV1alpha1Api {
  #client: c.RestClient;
  #root = "/apis/settings.k8s.io/v1alpha1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string) {
    return new SettingsV1alpha1NamespacedApi(this.#client, name);
  }
  myNamespace() {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new SettingsV1alpha1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getPodPresetListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podpresets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPresetList(resp);
  }

  async watchPodPresetListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podpresets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(SettingsV1alpha1.toPodPreset, MetaV1.toStatus));
  }

}

export class SettingsV1alpha1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/settings.k8s.io/v1alpha1/namespaces/${namespace}/`;
  }

  async getPodPresetList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podpresets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPresetList(resp);
  }

  async watchPodPresetList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podpresets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(SettingsV1alpha1.toPodPreset, MetaV1.toStatus));
  }

  async createPodPreset(body: SettingsV1alpha1.PodPreset, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}podpresets`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: SettingsV1alpha1.fromPodPreset(body),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPreset(resp);
  }

  async deletePodPresetList(body: MetaV1.DeleteOptions, opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}podpresets`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPresetList(resp);
  }

  async getPodPreset(name: string, opts: operations.GetOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podpresets/${name}`,
      expectJson: true,
      querystring: operations.formatGetOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPreset(resp);
  }

  async deletePodPreset(name: string, body: MetaV1.DeleteOptions, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}podpresets/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPreset(resp);
  }

  async replacePodPreset(name: string, body: SettingsV1alpha1.PodPreset, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}podpresets/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: SettingsV1alpha1.fromPodPreset(body),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPreset(resp);
  }

  async patchPodPreset(name: string, body: MetaV1.Patch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}podpresets/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      bodyJson: MetaV1.fromPatch(body),
      abortSignal: opts.abortSignal,
    });
    return SettingsV1alpha1.toPodPreset(resp);
  }

}
