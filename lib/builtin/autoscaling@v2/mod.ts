export * from "./structs.ts";

// Autogenerated API file for AutoscalingV2
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as AutoscalingV2 from "./structs.ts";

export class AutoscalingV2Api {
  #client: c.RestClient;
  #root = "/apis/autoscaling/v2/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): AutoscalingV2NamespacedApi {
    return new AutoscalingV2NamespacedApi(this.#client, name);
  }
  myNamespace(): AutoscalingV2NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new AutoscalingV2NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getHorizontalPodAutoscalerListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscalerList(resp);
  }

  async watchHorizontalPodAutoscalerListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<ReadableStream<c.WatchEvent<AutoscalingV2.HorizontalPodAutoscaler & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AutoscalingV2.toHorizontalPodAutoscaler, MetaV1.toStatus));
  }

}

export class AutoscalingV2NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/autoscaling/v2/namespaces/${namespace}/`;
  }

  async getHorizontalPodAutoscalerList(
    opts: operations.GetListOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscalerList(resp);
  }

  async watchHorizontalPodAutoscalerList(
    opts: operations.WatchListOpts = {},
  ): Promise<ReadableStream<c.WatchEvent<AutoscalingV2.HorizontalPodAutoscaler & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AutoscalingV2.toHorizontalPodAutoscaler, MetaV1.toStatus));
  }

  async createHorizontalPodAutoscaler(
    body: AutoscalingV2.HorizontalPodAutoscaler,
    opts: operations.PutOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV2.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async deleteHorizontalPodAutoscalerList(
    opts: operations.DeleteListOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscalerList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}horizontalpodautoscalers`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscalerList(resp);
  }

  async getHorizontalPodAutoscaler(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async deleteHorizontalPodAutoscaler(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async replaceHorizontalPodAutoscaler(
    name: string,
    body: AutoscalingV2.HorizontalPodAutoscaler,
    opts: operations.PutOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV2.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async patchHorizontalPodAutoscaler(
    name: string,
    type: c.PatchType,
    body: AutoscalingV2.HorizontalPodAutoscaler | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}horizontalpodautoscalers/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AutoscalingV2.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async getHorizontalPodAutoscalerStatus(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async replaceHorizontalPodAutoscalerStatus(
    name: string,
    body: AutoscalingV2.HorizontalPodAutoscaler,
    opts: operations.PutOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV2.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

  async patchHorizontalPodAutoscalerStatus(
    name: string,
    type: c.PatchType,
    body: AutoscalingV2.HorizontalPodAutoscaler | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AutoscalingV2.HorizontalPodAutoscaler> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}horizontalpodautoscalers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AutoscalingV2.fromHorizontalPodAutoscaler(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV2.toHorizontalPodAutoscaler(resp);
  }

}
