// Autogenerated Schema file for NetworkingV1alpha1
import * as c from "../../common.ts";

import * as CoreV1 from "../core@v1/structs.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** ClusterCIDR represents a single configuration for per-Node Pod CIDR allocations when the MultiCIDRRangeAllocator is enabled (see the config for kube-controller-manager).  A cluster may have any number of ClusterCIDR resources, all of which will be considered when allocating a CIDR for a Node.  A ClusterCIDR is eligible to be used for a given Node when the node selector matches the node in question and has free CIDRs to allocate.  In case of multiple matching ClusterCIDR resources, the allocator will attempt to break ties using internal heuristics, but any ClusterCIDR whose node selector matches the Node may be used. */
export interface ClusterCIDR {
  apiVersion?: "networking.k8s.io/v1alpha1";
  kind?: "ClusterCIDR";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: ClusterCIDRSpec | null;
}
export function toClusterCIDR(input: c.JSONValue): ClusterCIDR & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "networking.k8s.io/v1alpha1", "ClusterCIDR"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toClusterCIDRSpec),
  }}
export function fromClusterCIDR(input: ClusterCIDR): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "networking.k8s.io/v1alpha1", "ClusterCIDR"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromClusterCIDRSpec(input.spec) : undefined,
  }}

/** ClusterCIDRSpec defines the desired state of ClusterCIDR. */
export interface ClusterCIDRSpec {
  ipv4?: string | null;
  ipv6?: string | null;
  nodeSelector?: CoreV1.NodeSelector | null;
  perNodeHostBits: number;
}
export function toClusterCIDRSpec(input: c.JSONValue): ClusterCIDRSpec {
  const obj = c.checkObj(input);
  return {
    ipv4: c.readOpt(obj["ipv4"], c.checkStr),
    ipv6: c.readOpt(obj["ipv6"], c.checkStr),
    nodeSelector: c.readOpt(obj["nodeSelector"], CoreV1.toNodeSelector),
    perNodeHostBits: c.checkNum(obj["perNodeHostBits"]),
  }}
export function fromClusterCIDRSpec(input: ClusterCIDRSpec): c.JSONValue {
  return {
    ...input,
    nodeSelector: input.nodeSelector != null ? CoreV1.fromNodeSelector(input.nodeSelector) : undefined,
  }}

/** ClusterCIDRList contains a list of ClusterCIDR. */
export interface ClusterCIDRList extends ListOf<ClusterCIDR> {
  apiVersion?: "networking.k8s.io/v1alpha1";
  kind?: "ClusterCIDRList";
};
export function toClusterCIDRList(input: c.JSONValue): ClusterCIDRList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "networking.k8s.io/v1alpha1", "ClusterCIDRList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toClusterCIDR),
  }}
