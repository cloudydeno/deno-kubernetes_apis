export * from "./structs.ts";

// Autogenerated API file for StorageV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as StorageV1 from "./structs.ts";

export class StorageV1Api {
  #client: c.RestClient;
  #root = "/apis/storage.k8s.io/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): StorageV1NamespacedApi {
    return new StorageV1NamespacedApi(this.#client, name);
  }
  myNamespace(): StorageV1NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new StorageV1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getCSIDriverList(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.CSIDriverList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csidrivers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriverList(resp);
  }

  async watchCSIDriverList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.CSIDriver>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csidrivers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toCSIDriver, MetaV1.toStatus));
  }

  async createCSIDriver(
    body: StorageV1.CSIDriver,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSIDriver> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}csidrivers`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSIDriver(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriver(resp);
  }

  async deleteCSIDriverList(
    opts: operations.DeleteListOpts = {},
  ): Promise<StorageV1.CSIDriverList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csidrivers`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriverList(resp);
  }

  async getCSIDriver(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.CSIDriver> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csidrivers/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriver(resp);
  }

  async deleteCSIDriver(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<StorageV1.CSIDriver | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csidrivers/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1.toCSIDriver(resp);
  }

  async replaceCSIDriver(
    name: string,
    body: StorageV1.CSIDriver,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSIDriver> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}csidrivers/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSIDriver(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriver(resp);
  }

  async patchCSIDriver(
    name: string,
    type: c.PatchType,
    body: StorageV1.CSIDriver | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.CSIDriver> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}csidrivers/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromCSIDriver(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIDriver(resp);
  }

  async getCSINodeList(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.CSINodeList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csinodes`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINodeList(resp);
  }

  async watchCSINodeList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.CSINode>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csinodes`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toCSINode, MetaV1.toStatus));
  }

  async createCSINode(
    body: StorageV1.CSINode,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSINode> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}csinodes`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSINode(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINode(resp);
  }

  async deleteCSINodeList(
    opts: operations.DeleteListOpts = {},
  ): Promise<StorageV1.CSINodeList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csinodes`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINodeList(resp);
  }

  async getCSINode(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.CSINode> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csinodes/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINode(resp);
  }

  async deleteCSINode(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<StorageV1.CSINode | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csinodes/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1.toCSINode(resp);
  }

  async replaceCSINode(
    name: string,
    body: StorageV1.CSINode,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSINode> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}csinodes/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSINode(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINode(resp);
  }

  async patchCSINode(
    name: string,
    type: c.PatchType,
    body: StorageV1.CSINode | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.CSINode> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}csinodes/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromCSINode(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSINode(resp);
  }

  async getCSIStorageCapacityListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.CSIStorageCapacityList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacityList(resp);
  }

  async watchCSIStorageCapacityListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.CSIStorageCapacity>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toCSIStorageCapacity, MetaV1.toStatus));
  }

  async getStorageClassList(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.StorageClassList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}storageclasses`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClassList(resp);
  }

  async watchStorageClassList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.StorageClass>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}storageclasses`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toStorageClass, MetaV1.toStatus));
  }

  async createStorageClass(
    body: StorageV1.StorageClass,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.StorageClass> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}storageclasses`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromStorageClass(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClass(resp);
  }

  async deleteStorageClassList(
    opts: operations.DeleteListOpts = {},
  ): Promise<StorageV1.StorageClassList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}storageclasses`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClassList(resp);
  }

  async getStorageClass(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.StorageClass> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}storageclasses/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClass(resp);
  }

  async deleteStorageClass(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<StorageV1.StorageClass | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}storageclasses/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1.toStorageClass(resp);
  }

  async replaceStorageClass(
    name: string,
    body: StorageV1.StorageClass,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.StorageClass> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}storageclasses/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromStorageClass(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClass(resp);
  }

  async patchStorageClass(
    name: string,
    type: c.PatchType,
    body: StorageV1.StorageClass | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.StorageClass> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}storageclasses/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromStorageClass(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toStorageClass(resp);
  }

  async getVolumeAttachmentList(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.VolumeAttachmentList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}volumeattachments`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachmentList(resp);
  }

  async watchVolumeAttachmentList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.VolumeAttachment>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}volumeattachments`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toVolumeAttachment, MetaV1.toStatus));
  }

  async createVolumeAttachment(
    body: StorageV1.VolumeAttachment,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}volumeattachments`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromVolumeAttachment(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async deleteVolumeAttachmentList(
    opts: operations.DeleteListOpts = {},
  ): Promise<StorageV1.VolumeAttachmentList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}volumeattachments`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachmentList(resp);
  }

  async getVolumeAttachment(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}volumeattachments/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async deleteVolumeAttachment(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<StorageV1.VolumeAttachment | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}volumeattachments/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1.toVolumeAttachment(resp);
  }

  async replaceVolumeAttachment(
    name: string,
    body: StorageV1.VolumeAttachment,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}volumeattachments/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromVolumeAttachment(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async patchVolumeAttachment(
    name: string,
    type: c.PatchType,
    body: StorageV1.VolumeAttachment | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}volumeattachments/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromVolumeAttachment(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async getVolumeAttachmentStatus(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}volumeattachments/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async replaceVolumeAttachmentStatus(
    name: string,
    body: StorageV1.VolumeAttachment,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}volumeattachments/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromVolumeAttachment(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

  async patchVolumeAttachmentStatus(
    name: string,
    type: c.PatchType,
    body: StorageV1.VolumeAttachment | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.VolumeAttachment> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}volumeattachments/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromVolumeAttachment(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toVolumeAttachment(resp);
  }

}

export class StorageV1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/storage.k8s.io/v1/namespaces/${namespace}/`;
  }

  async getCSIStorageCapacityList(
    opts: operations.GetListOpts = {},
  ): Promise<StorageV1.CSIStorageCapacityList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacityList(resp);
  }

  async watchCSIStorageCapacityList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<StorageV1.CSIStorageCapacity>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(StorageV1.toCSIStorageCapacity, MetaV1.toStatus));
  }

  async createCSIStorageCapacity(
    body: StorageV1.CSIStorageCapacity,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSIStorageCapacity> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacity(resp);
  }

  async deleteCSIStorageCapacityList(
    opts: operations.DeleteListOpts = {},
  ): Promise<StorageV1.CSIStorageCapacityList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csistoragecapacities`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacityList(resp);
  }

  async getCSIStorageCapacity(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<StorageV1.CSIStorageCapacity> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacity(resp);
  }

  async deleteCSIStorageCapacity(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<StorageV1.CSIStorageCapacity | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return StorageV1.toCSIStorageCapacity(resp);
  }

  async replaceCSIStorageCapacity(
    name: string,
    body: StorageV1.CSIStorageCapacity,
    opts: operations.PutOpts = {},
  ): Promise<StorageV1.CSIStorageCapacity> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: StorageV1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacity(resp);
  }

  async patchCSIStorageCapacity(
    name: string,
    type: c.PatchType,
    body: StorageV1.CSIStorageCapacity | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<StorageV1.CSIStorageCapacity> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}csistoragecapacities/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : StorageV1.fromCSIStorageCapacity(body),
      abortSignal: opts.abortSignal,
    });
    return StorageV1.toCSIStorageCapacity(resp);
  }

}
