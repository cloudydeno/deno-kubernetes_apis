export * from "./structs.ts";

// Autogenerated API file for ApiregistrationV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as ApiregistrationV1 from "./structs.ts";

export class ApiregistrationV1Api {
  #client: c.RestClient;
  #root = "/apis/apiregistration.k8s.io/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getAPIServiceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}apiservices`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIServiceList(resp);
  }

  async watchAPIServiceList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}apiservices`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ApiregistrationV1.toAPIService, MetaV1.toStatus));
  }

  async createAPIService(body: ApiregistrationV1.APIService, opts: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["dryRun"] != null) query.append("dryRun", opts["dryRun"]);
    if (opts["fieldManager"] != null) query.append("fieldManager", opts["fieldManager"]);
    if (opts["fieldValidation"] != null) query.append("fieldValidation", opts["fieldValidation"]);
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}apiservices`,
      expectJson: true,
      querystring: query,
      bodyJson: ApiregistrationV1.fromAPIService(body),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async deleteAPIServiceList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}apiservices`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIServiceList(resp);
  }

  async getAPIService(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}apiservices/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async deleteAPIService(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}apiservices/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceAPIService(name: string, body: ApiregistrationV1.APIService, opts: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["dryRun"] != null) query.append("dryRun", opts["dryRun"]);
    if (opts["fieldManager"] != null) query.append("fieldManager", opts["fieldManager"]);
    if (opts["fieldValidation"] != null) query.append("fieldValidation", opts["fieldValidation"]);
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}apiservices/${name}`,
      expectJson: true,
      querystring: query,
      bodyJson: ApiregistrationV1.fromAPIService(body),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async patchAPIService(name: string, body: ApiregistrationV1.APIService, opts: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["dryRun"] != null) query.append("dryRun", opts["dryRun"]);
    if (opts["fieldManager"] != null) query.append("fieldManager", opts["fieldManager"]);
    if (opts["fieldValidation"] != null) query.append("fieldValidation", opts["fieldValidation"]);
    if (opts["force"] != null) query.append("force", opts["force"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}apiservices/${name}`,
      expectJson: true,
      querystring: query,
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ApiregistrationV1.fromAPIService(body),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async getAPIServiceStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}apiservices/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async replaceAPIServiceStatus(name: string, body: ApiregistrationV1.APIService, opts: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["dryRun"] != null) query.append("dryRun", opts["dryRun"]);
    if (opts["fieldManager"] != null) query.append("fieldManager", opts["fieldManager"]);
    if (opts["fieldValidation"] != null) query.append("fieldValidation", opts["fieldValidation"]);
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}apiservices/${name}/status`,
      expectJson: true,
      querystring: query,
      bodyJson: ApiregistrationV1.fromAPIService(body),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

  async patchAPIServiceStatus(name: string, body: ApiregistrationV1.APIService, opts: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["dryRun"] != null) query.append("dryRun", opts["dryRun"]);
    if (opts["fieldManager"] != null) query.append("fieldManager", opts["fieldManager"]);
    if (opts["fieldValidation"] != null) query.append("fieldValidation", opts["fieldValidation"]);
    if (opts["force"] != null) query.append("force", opts["force"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}apiservices/${name}/status`,
      expectJson: true,
      querystring: query,
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ApiregistrationV1.fromAPIService(body),
      abortSignal: opts.abortSignal,
    });
    return ApiregistrationV1.toAPIService(resp);
  }

}
