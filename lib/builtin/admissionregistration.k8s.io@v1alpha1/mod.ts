export * from "./structs.ts";

// Autogenerated API file for AdmissionregistrationV1alpha1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as AdmissionregistrationV1alpha1 from "./structs.ts";

export class AdmissionregistrationV1alpha1Api {
  #client: c.RestClient;
  #root = "/apis/admissionregistration.k8s.io/v1alpha1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getMutatingAdmissionPolicyList(
    opts: operations.GetListOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicies`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyList(resp);
  }

  async watchMutatingAdmissionPolicyList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicies`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy, MetaV1.toStatus));
  }

  async createMutatingAdmissionPolicy(
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicy,
    opts: operations.PutOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}mutatingadmissionpolicies`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicy(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy(resp);
  }

  async deleteMutatingAdmissionPolicyList(
    opts: operations.DeleteListOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}mutatingadmissionpolicies`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyList(resp);
  }

  async getMutatingAdmissionPolicy(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicies/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy(resp);
  }

  async deleteMutatingAdmissionPolicy(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}mutatingadmissionpolicies/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy(resp);
  }

  async replaceMutatingAdmissionPolicy(
    name: string,
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicy,
    opts: operations.PutOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}mutatingadmissionpolicies/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicy(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy(resp);
  }

  async patchMutatingAdmissionPolicy(
    name: string,
    type: c.PatchType,
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicy | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicy> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}mutatingadmissionpolicies/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicy(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicy(resp);
  }

  async getMutatingAdmissionPolicyBindingList(
    opts: operations.GetListOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBindingList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicybindings`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBindingList(resp);
  }

  async watchMutatingAdmissionPolicyBindingList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicybindings`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding, MetaV1.toStatus));
  }

  async createMutatingAdmissionPolicyBinding(
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding,
    opts: operations.PutOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}mutatingadmissionpolicybindings`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicyBinding(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding(resp);
  }

  async deleteMutatingAdmissionPolicyBindingList(
    opts: operations.DeleteListOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBindingList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}mutatingadmissionpolicybindings`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBindingList(resp);
  }

  async getMutatingAdmissionPolicyBinding(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}mutatingadmissionpolicybindings/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding(resp);
  }

  async deleteMutatingAdmissionPolicyBinding(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}mutatingadmissionpolicybindings/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding(resp);
  }

  async replaceMutatingAdmissionPolicyBinding(
    name: string,
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding,
    opts: operations.PutOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}mutatingadmissionpolicybindings/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicyBinding(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding(resp);
  }

  async patchMutatingAdmissionPolicyBinding(
    name: string,
    type: c.PatchType,
    body: AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AdmissionregistrationV1alpha1.MutatingAdmissionPolicyBinding> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}mutatingadmissionpolicybindings/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AdmissionregistrationV1alpha1.fromMutatingAdmissionPolicyBinding(body),
      abortSignal: opts.abortSignal,
    });
    return AdmissionregistrationV1alpha1.toMutatingAdmissionPolicyBinding(resp);
  }

}
