// Autogenerated Schema file for AdmissionregistrationV1alpha1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded) */
export interface MatchResources {
  excludeResourceRules?: Array<NamedRuleWithOperations> | null;
  matchPolicy?: string | null;
  namespaceSelector?: MetaV1.LabelSelector | null;
  objectSelector?: MetaV1.LabelSelector | null;
  resourceRules?: Array<NamedRuleWithOperations> | null;
}
export function toMatchResources(input: c.JSONValue): MatchResources {
  const obj = c.checkObj(input);
  return {
    excludeResourceRules: c.readOpt(obj["excludeResourceRules"], x => c.readList(x, toNamedRuleWithOperations)),
    matchPolicy: c.readOpt(obj["matchPolicy"], c.checkStr),
    namespaceSelector: c.readOpt(obj["namespaceSelector"], MetaV1.toLabelSelector),
    objectSelector: c.readOpt(obj["objectSelector"], MetaV1.toLabelSelector),
    resourceRules: c.readOpt(obj["resourceRules"], x => c.readList(x, toNamedRuleWithOperations)),
  }}
export function fromMatchResources(input: MatchResources): c.JSONValue {
  return {
    ...input,
    excludeResourceRules: input.excludeResourceRules?.map(fromNamedRuleWithOperations),
    namespaceSelector: input.namespaceSelector != null ? MetaV1.fromLabelSelector(input.namespaceSelector) : undefined,
    objectSelector: input.objectSelector != null ? MetaV1.fromLabelSelector(input.objectSelector) : undefined,
    resourceRules: input.resourceRules?.map(fromNamedRuleWithOperations),
  }}

/** NamedRuleWithOperations is a tuple of Operations and Resources with ResourceNames. */
export interface NamedRuleWithOperations {
  apiGroups?: Array<string> | null;
  apiVersions?: Array<string> | null;
  operations?: Array<string> | null;
  resourceNames?: Array<string> | null;
  resources?: Array<string> | null;
  scope?: string | null;
}
export function toNamedRuleWithOperations(input: c.JSONValue): NamedRuleWithOperations {
  const obj = c.checkObj(input);
  return {
    apiGroups: c.readOpt(obj["apiGroups"], x => c.readList(x, c.checkStr)),
    apiVersions: c.readOpt(obj["apiVersions"], x => c.readList(x, c.checkStr)),
    operations: c.readOpt(obj["operations"], x => c.readList(x, c.checkStr)),
    resourceNames: c.readOpt(obj["resourceNames"], x => c.readList(x, c.checkStr)),
    resources: c.readOpt(obj["resources"], x => c.readList(x, c.checkStr)),
    scope: c.readOpt(obj["scope"], c.checkStr),
  }}
export function fromNamedRuleWithOperations(input: NamedRuleWithOperations): c.JSONValue {
  return {
    ...input,
  }}

/** ParamKind is a tuple of Group Kind and Version. */
export interface ParamKind {
  apiVersion?: string | null;
  kind?: string | null;
}
export function toParamKind(input: c.JSONValue): ParamKind {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
  }}
export function fromParamKind(input: ParamKind): c.JSONValue {
  return {
    ...input,
  }}

/** ParamRef references a parameter resource */
export interface ParamRef {
  name?: string | null;
  namespace?: string | null;
}
export function toParamRef(input: c.JSONValue): ParamRef {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
  }}
export function fromParamRef(input: ParamRef): c.JSONValue {
  return {
    ...input,
  }}

/** ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it. */
export interface ValidatingAdmissionPolicy {
  apiVersion?: "admissionregistration.k8s.io/v1alpha1";
  kind?: "ValidatingAdmissionPolicy";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: ValidatingAdmissionPolicySpec | null;
}
export function toValidatingAdmissionPolicy(input: c.JSONValue): ValidatingAdmissionPolicy & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicy"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toValidatingAdmissionPolicySpec),
  }}
export function fromValidatingAdmissionPolicy(input: ValidatingAdmissionPolicy): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicy"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromValidatingAdmissionPolicySpec(input.spec) : undefined,
  }}

/** ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy. */
export interface ValidatingAdmissionPolicySpec {
  failurePolicy?: string | null;
  matchConstraints?: MatchResources | null;
  paramKind?: ParamKind | null;
  validations: Array<Validation>;
}
export function toValidatingAdmissionPolicySpec(input: c.JSONValue): ValidatingAdmissionPolicySpec {
  const obj = c.checkObj(input);
  return {
    failurePolicy: c.readOpt(obj["failurePolicy"], c.checkStr),
    matchConstraints: c.readOpt(obj["matchConstraints"], toMatchResources),
    paramKind: c.readOpt(obj["paramKind"], toParamKind),
    validations: c.readList(obj["validations"], toValidation),
  }}
export function fromValidatingAdmissionPolicySpec(input: ValidatingAdmissionPolicySpec): c.JSONValue {
  return {
    ...input,
    matchConstraints: input.matchConstraints != null ? fromMatchResources(input.matchConstraints) : undefined,
    paramKind: input.paramKind != null ? fromParamKind(input.paramKind) : undefined,
    validations: input.validations?.map(fromValidation),
  }}

/** Validation specifies the CEL expression which is used to apply the validation. */
export interface Validation {
  expression: string;
  message?: string | null;
  reason?: string | null;
}
export function toValidation(input: c.JSONValue): Validation {
  const obj = c.checkObj(input);
  return {
    expression: c.checkStr(obj["expression"]),
    message: c.readOpt(obj["message"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
  }}
export function fromValidation(input: Validation): c.JSONValue {
  return {
    ...input,
  }}

/** ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters. */
export interface ValidatingAdmissionPolicyBinding {
  apiVersion?: "admissionregistration.k8s.io/v1alpha1";
  kind?: "ValidatingAdmissionPolicyBinding";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: ValidatingAdmissionPolicyBindingSpec | null;
}
export function toValidatingAdmissionPolicyBinding(input: c.JSONValue): ValidatingAdmissionPolicyBinding & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicyBinding"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toValidatingAdmissionPolicyBindingSpec),
  }}
export function fromValidatingAdmissionPolicyBinding(input: ValidatingAdmissionPolicyBinding): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicyBinding"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromValidatingAdmissionPolicyBindingSpec(input.spec) : undefined,
  }}

/** ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding. */
export interface ValidatingAdmissionPolicyBindingSpec {
  matchResources?: MatchResources | null;
  paramRef?: ParamRef | null;
  policyName?: string | null;
}
export function toValidatingAdmissionPolicyBindingSpec(input: c.JSONValue): ValidatingAdmissionPolicyBindingSpec {
  const obj = c.checkObj(input);
  return {
    matchResources: c.readOpt(obj["matchResources"], toMatchResources),
    paramRef: c.readOpt(obj["paramRef"], toParamRef),
    policyName: c.readOpt(obj["policyName"], c.checkStr),
  }}
export function fromValidatingAdmissionPolicyBindingSpec(input: ValidatingAdmissionPolicyBindingSpec): c.JSONValue {
  return {
    ...input,
    matchResources: input.matchResources != null ? fromMatchResources(input.matchResources) : undefined,
    paramRef: input.paramRef != null ? fromParamRef(input.paramRef) : undefined,
  }}

/** ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding. */
export interface ValidatingAdmissionPolicyBindingList extends ListOf<ValidatingAdmissionPolicyBinding> {
  apiVersion?: "admissionregistration.k8s.io/v1alpha1";
  kind?: "ValidatingAdmissionPolicyBindingList";
};
export function toValidatingAdmissionPolicyBindingList(input: c.JSONValue): ValidatingAdmissionPolicyBindingList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicyBindingList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toValidatingAdmissionPolicyBinding),
  }}

/** ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy. */
export interface ValidatingAdmissionPolicyList extends ListOf<ValidatingAdmissionPolicy> {
  apiVersion?: "admissionregistration.k8s.io/v1alpha1";
  kind?: "ValidatingAdmissionPolicyList";
};
export function toValidatingAdmissionPolicyList(input: c.JSONValue): ValidatingAdmissionPolicyList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "admissionregistration.k8s.io/v1alpha1", "ValidatingAdmissionPolicyList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toValidatingAdmissionPolicy),
  }}
