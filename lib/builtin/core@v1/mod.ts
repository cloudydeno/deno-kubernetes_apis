export * from "./structs.ts";

// Autogenerated API file for CoreV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as AuthenticationV1 from "../authentication.k8s.io@v1/structs.ts";
import * as AutoscalingV1 from "../autoscaling@v1/structs.ts";
import * as PolicyV1 from "../policy@v1/structs.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as CoreV1 from "./structs.ts";

export class CoreV1Api {
  #client: c.RestClient;
  #root = "/api/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string) {
    return new CoreV1NamespacedApi(this.#client, name);
  }
  myNamespace() {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new CoreV1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getComponentStatusList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}componentstatuses`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toComponentStatusList(resp);
  }

  async getComponentStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}componentstatuses/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toComponentStatus(resp);
  }

  async getConfigMapListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}configmaps`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMapList(resp);
  }

  async watchConfigMapListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}configmaps`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toConfigMap, MetaV1.toStatus));
  }

  async getEndpointsListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}endpoints`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpointsList(resp);
  }

  async watchEndpointsListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}endpoints`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toEndpoints, MetaV1.toStatus));
  }

  async getEventListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}events`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEventList(resp);
  }

  async watchEventListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}events`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toEvent, MetaV1.toStatus));
  }

  async getLimitRangeListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}limitranges`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRangeList(resp);
  }

  async watchLimitRangeListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}limitranges`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toLimitRange, MetaV1.toStatus));
  }

  async getNamespaceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}namespaces`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespaceList(resp);
  }

  async watchNamespaceList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}namespaces`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toNamespace, MetaV1.toStatus));
  }

  async createNamespace(body: CoreV1.Namespace, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}namespaces`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async getNamespace(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}namespaces/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async deleteNamespace(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}namespaces/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceNamespace(name: string, body: CoreV1.Namespace, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}namespaces/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async patchNamespace(name: string, type: c.PatchType, body: CoreV1.Namespace | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}namespaces/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async replaceNamespaceFinalize(name: string, body: CoreV1.Namespace, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}namespaces/${name}/finalize`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async getNamespaceStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}namespaces/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async replaceNamespaceStatus(name: string, body: CoreV1.Namespace, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}namespaces/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async patchNamespaceStatus(name: string, type: c.PatchType, body: CoreV1.Namespace | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}namespaces/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromNamespace(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNamespace(resp);
  }

  async getNodeList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}nodes`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNodeList(resp);
  }

  async watchNodeList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}nodes`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toNode, MetaV1.toStatus));
  }

  async createNode(body: CoreV1.Node, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}nodes`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNode(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async deleteNodeList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}nodes`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNodeList(resp);
  }

  async getNode(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}nodes/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async deleteNode(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}nodes/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceNode(name: string, body: CoreV1.Node, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}nodes/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNode(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async patchNode(name: string, type: c.PatchType, body: CoreV1.Node | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}nodes/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromNode(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  proxyNodeRequest(nodeName: string, opts: c.ProxyOptions & {expectStream: true; expectJson: true}): Promise<ReadableStream<c.JSONValue>>;
  proxyNodeRequest(nodeName: string, opts: c.ProxyOptions & {expectStream: true}): Promise<ReadableStream<Uint8Array>>;
  proxyNodeRequest(nodeName: string, opts: c.ProxyOptions & {expectJson: true}): Promise<c.JSONValue>;
  proxyNodeRequest(nodeName: string, opts: c.ProxyOptions): Promise<Uint8Array>;
  async proxyNodeRequest(nodeName: string, opts: c.ProxyOptions): Promise<unknown> {
    if (opts.path && !opts.path.startsWith('/')) throw new Error("Proxy path cannot be relative");
    const name = (opts.port != null) ? `${nodeName}:${opts.port}` : nodeName;
    const path = `${this.#root}nodes/${name}/proxy${opts.path || ''}`;
    return this.#client.performRequest({ ...opts, path });
  }

  async getNodeStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}nodes/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async replaceNodeStatus(name: string, body: CoreV1.Node, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}nodes/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromNode(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async patchNodeStatus(name: string, type: c.PatchType, body: CoreV1.Node | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}nodes/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromNode(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toNode(resp);
  }

  async getPersistentVolumeClaimListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaimList(resp);
  }

  async watchPersistentVolumeClaimListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPersistentVolumeClaim, MetaV1.toStatus));
  }

  async getPersistentVolumeList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumes`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeList(resp);
  }

  async watchPersistentVolumeList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumes`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPersistentVolume, MetaV1.toStatus));
  }

  async createPersistentVolume(body: CoreV1.PersistentVolume, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}persistentvolumes`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolume(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async deletePersistentVolumeList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}persistentvolumes`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeList(resp);
  }

  async getPersistentVolume(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumes/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async deletePersistentVolume(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}persistentvolumes/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async replacePersistentVolume(name: string, body: CoreV1.PersistentVolume, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}persistentvolumes/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolume(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async patchPersistentVolume(name: string, type: c.PatchType, body: CoreV1.PersistentVolume | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}persistentvolumes/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPersistentVolume(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async getPersistentVolumeStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumes/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async replacePersistentVolumeStatus(name: string, body: CoreV1.PersistentVolume, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}persistentvolumes/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolume(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async patchPersistentVolumeStatus(name: string, type: c.PatchType, body: CoreV1.PersistentVolume | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}persistentvolumes/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPersistentVolume(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolume(resp);
  }

  async getPodListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodList(resp);
  }

  async watchPodListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPod, MetaV1.toStatus));
  }

  async getPodTemplateListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplateList(resp);
  }

  async watchPodTemplateListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPodTemplate, MetaV1.toStatus));
  }

  async getReplicationControllerListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationControllerList(resp);
  }

  async watchReplicationControllerListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toReplicationController, MetaV1.toStatus));
  }

  async getResourceQuotaListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuotaList(resp);
  }

  async watchResourceQuotaListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toResourceQuota, MetaV1.toStatus));
  }

  async getSecretListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}secrets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecretList(resp);
  }

  async watchSecretListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}secrets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toSecret, MetaV1.toStatus));
  }

  async getServiceAccountListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccountList(resp);
  }

  async watchServiceAccountListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toServiceAccount, MetaV1.toStatus));
  }

  async getServiceListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceList(resp);
  }

  async watchServiceListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toService, MetaV1.toStatus));
  }

}

export class CoreV1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/api/v1/namespaces/${namespace}/`;
  }

  async createBinding(body: CoreV1.Binding, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}bindings`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromBinding(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toBinding(resp);
  }

  async getConfigMapList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}configmaps`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMapList(resp);
  }

  async watchConfigMapList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}configmaps`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toConfigMap, MetaV1.toStatus));
  }

  async createConfigMap(body: CoreV1.ConfigMap, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}configmaps`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromConfigMap(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMap(resp);
  }

  async deleteConfigMapList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}configmaps`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMapList(resp);
  }

  async getConfigMap(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}configmaps/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMap(resp);
  }

  async deleteConfigMap(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}configmaps/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceConfigMap(name: string, body: CoreV1.ConfigMap, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}configmaps/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromConfigMap(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMap(resp);
  }

  async patchConfigMap(name: string, type: c.PatchType, body: CoreV1.ConfigMap | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}configmaps/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromConfigMap(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toConfigMap(resp);
  }

  async getEndpointsList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}endpoints`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpointsList(resp);
  }

  async watchEndpointsList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}endpoints`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toEndpoints, MetaV1.toStatus));
  }

  async createEndpoints(body: CoreV1.Endpoints, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}endpoints`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromEndpoints(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpoints(resp);
  }

  async deleteEndpointsList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}endpoints`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpointsList(resp);
  }

  async getEndpoints(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}endpoints/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpoints(resp);
  }

  async deleteEndpoints(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}endpoints/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceEndpoints(name: string, body: CoreV1.Endpoints, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}endpoints/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromEndpoints(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpoints(resp);
  }

  async patchEndpoints(name: string, type: c.PatchType, body: CoreV1.Endpoints | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}endpoints/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromEndpoints(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEndpoints(resp);
  }

  async getEventList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}events`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEventList(resp);
  }

  async watchEventList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}events`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toEvent, MetaV1.toStatus));
  }

  async createEvent(body: CoreV1.Event, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}events`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromEvent(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEvent(resp);
  }

  async deleteEventList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}events`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEventList(resp);
  }

  async getEvent(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}events/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEvent(resp);
  }

  async deleteEvent(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}events/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceEvent(name: string, body: CoreV1.Event, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}events/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromEvent(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEvent(resp);
  }

  async patchEvent(name: string, type: c.PatchType, body: CoreV1.Event | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}events/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromEvent(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toEvent(resp);
  }

  async getLimitRangeList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}limitranges`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRangeList(resp);
  }

  async watchLimitRangeList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}limitranges`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toLimitRange, MetaV1.toStatus));
  }

  async createLimitRange(body: CoreV1.LimitRange, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}limitranges`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromLimitRange(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRange(resp);
  }

  async deleteLimitRangeList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}limitranges`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRangeList(resp);
  }

  async getLimitRange(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}limitranges/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRange(resp);
  }

  async deleteLimitRange(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}limitranges/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceLimitRange(name: string, body: CoreV1.LimitRange, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}limitranges/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromLimitRange(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRange(resp);
  }

  async patchLimitRange(name: string, type: c.PatchType, body: CoreV1.LimitRange | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}limitranges/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromLimitRange(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toLimitRange(resp);
  }

  async getPersistentVolumeClaimList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaimList(resp);
  }

  async watchPersistentVolumeClaimList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPersistentVolumeClaim, MetaV1.toStatus));
  }

  async createPersistentVolumeClaim(body: CoreV1.PersistentVolumeClaim, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolumeClaim(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async deletePersistentVolumeClaimList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}persistentvolumeclaims`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaimList(resp);
  }

  async getPersistentVolumeClaim(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async deletePersistentVolumeClaim(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}persistentvolumeclaims/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async replacePersistentVolumeClaim(name: string, body: CoreV1.PersistentVolumeClaim, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}persistentvolumeclaims/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolumeClaim(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async patchPersistentVolumeClaim(name: string, type: c.PatchType, body: CoreV1.PersistentVolumeClaim | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}persistentvolumeclaims/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPersistentVolumeClaim(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async getPersistentVolumeClaimStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}persistentvolumeclaims/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async replacePersistentVolumeClaimStatus(name: string, body: CoreV1.PersistentVolumeClaim, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}persistentvolumeclaims/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPersistentVolumeClaim(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async patchPersistentVolumeClaimStatus(name: string, type: c.PatchType, body: CoreV1.PersistentVolumeClaim | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}persistentvolumeclaims/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPersistentVolumeClaim(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPersistentVolumeClaim(resp);
  }

  async getPodList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodList(resp);
  }

  async watchPodList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPod, MetaV1.toStatus));
  }

  async createPod(body: CoreV1.Pod, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async deletePodList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}pods`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodList(resp);
  }

  async getPod(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async deletePod(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}pods/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async replacePod(name: string, body: CoreV1.Pod, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}pods/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async patchPod(name: string, type: c.PatchType, body: CoreV1.Pod | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}pods/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async connectGetPodAttach(name: string, opts: {
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["stderr"] != null) query.append("stderr", opts["stderr"] ? '1' : '0');
    if (opts["stdin"] != null) query.append("stdin", opts["stdin"] ? '1' : '0');
    if (opts["stdout"] != null) query.append("stdout", opts["stdout"] ? '1' : '0');
    if (opts["tty"] != null) query.append("tty", opts["tty"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/attach`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  async connectPostPodAttach(name: string, opts: {
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["stderr"] != null) query.append("stderr", opts["stderr"] ? '1' : '0');
    if (opts["stdin"] != null) query.append("stdin", opts["stdin"] ? '1' : '0');
    if (opts["stdout"] != null) query.append("stdout", opts["stdout"] ? '1' : '0');
    if (opts["tty"] != null) query.append("tty", opts["tty"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods/${name}/attach`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  async createPodBinding(name: string, body: CoreV1.Binding, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods/${name}/binding`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromBinding(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toBinding(resp);
  }

  async getPodEphemeralcontainers(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/ephemeralcontainers`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async replacePodEphemeralcontainers(name: string, body: CoreV1.Pod, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}pods/${name}/ephemeralcontainers`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async patchPodEphemeralcontainers(name: string, type: c.PatchType, body: CoreV1.Pod | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}pods/${name}/ephemeralcontainers`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async createPodEviction(name: string, body: PolicyV1.Eviction, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods/${name}/eviction`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: PolicyV1.fromEviction(body),
      abortSignal: opts.abortSignal,
    });
    return PolicyV1.toEviction(resp);
  }

  async connectGetPodExec(name: string, opts: {
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["command"] != null) query.append("command", opts["command"]);
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["stderr"] != null) query.append("stderr", opts["stderr"] ? '1' : '0');
    if (opts["stdin"] != null) query.append("stdin", opts["stdin"] ? '1' : '0');
    if (opts["stdout"] != null) query.append("stdout", opts["stdout"] ? '1' : '0');
    if (opts["tty"] != null) query.append("tty", opts["tty"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/exec`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  async connectPostPodExec(name: string, opts: {
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["command"] != null) query.append("command", opts["command"]);
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["stderr"] != null) query.append("stderr", opts["stderr"] ? '1' : '0');
    if (opts["stdin"] != null) query.append("stdin", opts["stdin"] ? '1' : '0');
    if (opts["stdout"] != null) query.append("stdout", opts["stdout"] ? '1' : '0');
    if (opts["tty"] != null) query.append("tty", opts["tty"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods/${name}/exec`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  async streamPodLog(name: string, opts: {
    container?: string;
    follow?: boolean;
    insecureSkipTLSVerifyBackend?: boolean;
    limitBytes?: number;
    previous?: boolean;
    sinceSeconds?: number;
    tailLines?: number;
    timestamps?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["follow"] != null) query.append("follow", opts["follow"] ? '1' : '0');
    if (opts["insecureSkipTLSVerifyBackend"] != null) query.append("insecureSkipTLSVerifyBackend", opts["insecureSkipTLSVerifyBackend"] ? '1' : '0');
    if (opts["limitBytes"] != null) query.append("limitBytes", String(opts["limitBytes"]));
    if (opts["previous"] != null) query.append("previous", opts["previous"] ? '1' : '0');
    if (opts["sinceSeconds"] != null) query.append("sinceSeconds", String(opts["sinceSeconds"]));
    if (opts["tailLines"] != null) query.append("tailLines", String(opts["tailLines"]));
    if (opts["timestamps"] != null) query.append("timestamps", opts["timestamps"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/log`,
      expectStream: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new TextDecoderStream('utf-8'));
  }

  async getPodLog(name: string, opts: {
    container?: string;
    insecureSkipTLSVerifyBackend?: boolean;
    limitBytes?: number;
    previous?: boolean;
    sinceSeconds?: number;
    tailLines?: number;
    timestamps?: boolean;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["container"] != null) query.append("container", opts["container"]);
    if (opts["insecureSkipTLSVerifyBackend"] != null) query.append("insecureSkipTLSVerifyBackend", opts["insecureSkipTLSVerifyBackend"] ? '1' : '0');
    if (opts["limitBytes"] != null) query.append("limitBytes", String(opts["limitBytes"]));
    if (opts["previous"] != null) query.append("previous", opts["previous"] ? '1' : '0');
    if (opts["sinceSeconds"] != null) query.append("sinceSeconds", String(opts["sinceSeconds"]));
    if (opts["tailLines"] != null) query.append("tailLines", String(opts["tailLines"]));
    if (opts["timestamps"] != null) query.append("timestamps", opts["timestamps"] ? '1' : '0');
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/log`,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return new TextDecoder('utf-8').decode(resp);
  }

  async connectGetPodPortforward(name: string, opts: {
    ports?: number;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["ports"] != null) query.append("ports", String(opts["ports"]));
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/portforward`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  async connectPostPodPortforward(name: string, opts: {
    ports?: number;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["ports"] != null) query.append("ports", String(opts["ports"]));
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}pods/${name}/portforward`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
  }

  proxyPodRequest(podName: string, opts: c.ProxyOptions & {expectStream: true; expectJson: true}): Promise<ReadableStream<c.JSONValue>>;
  proxyPodRequest(podName: string, opts: c.ProxyOptions & {expectStream: true}): Promise<ReadableStream<Uint8Array>>;
  proxyPodRequest(podName: string, opts: c.ProxyOptions & {expectJson: true}): Promise<c.JSONValue>;
  proxyPodRequest(podName: string, opts: c.ProxyOptions): Promise<Uint8Array>;
  async proxyPodRequest(podName: string, opts: c.ProxyOptions): Promise<unknown> {
    if (opts.path && !opts.path.startsWith('/')) throw new Error("Proxy path cannot be relative");
    const name = (opts.port != null) ? `${podName}:${opts.port}` : podName;
    const path = `${this.#root}pods/${name}/proxy${opts.path || ''}`;
    return this.#client.performRequest({ ...opts, path });
  }

  async getPodStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}pods/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async replacePodStatus(name: string, body: CoreV1.Pod, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}pods/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async patchPodStatus(name: string, type: c.PatchType, body: CoreV1.Pod | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}pods/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPod(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPod(resp);
  }

  async getPodTemplateList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplateList(resp);
  }

  async watchPodTemplateList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toPodTemplate, MetaV1.toStatus));
  }

  async createPodTemplate(body: CoreV1.PodTemplate, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPodTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplate(resp);
  }

  async deletePodTemplateList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}podtemplates`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplateList(resp);
  }

  async getPodTemplate(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}podtemplates/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplate(resp);
  }

  async deletePodTemplate(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}podtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplate(resp);
  }

  async replacePodTemplate(name: string, body: CoreV1.PodTemplate, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}podtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromPodTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplate(resp);
  }

  async patchPodTemplate(name: string, type: c.PatchType, body: CoreV1.PodTemplate | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}podtemplates/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromPodTemplate(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toPodTemplate(resp);
  }

  async getReplicationControllerList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationControllerList(resp);
  }

  async watchReplicationControllerList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toReplicationController, MetaV1.toStatus));
  }

  async createReplicationController(body: CoreV1.ReplicationController, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromReplicationController(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async deleteReplicationControllerList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}replicationcontrollers`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationControllerList(resp);
  }

  async getReplicationController(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async deleteReplicationController(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}replicationcontrollers/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceReplicationController(name: string, body: CoreV1.ReplicationController, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}replicationcontrollers/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromReplicationController(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async patchReplicationController(name: string, type: c.PatchType, body: CoreV1.ReplicationController | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}replicationcontrollers/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromReplicationController(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async getReplicationControllerScale(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers/${name}/scale`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toScale(resp);
  }

  async replaceReplicationControllerScale(name: string, body: AutoscalingV1.Scale, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}replicationcontrollers/${name}/scale`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AutoscalingV1.fromScale(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toScale(resp);
  }

  async patchReplicationControllerScale(name: string, type: c.PatchType, body: AutoscalingV1.Scale | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}replicationcontrollers/${name}/scale`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AutoscalingV1.fromScale(body),
      abortSignal: opts.abortSignal,
    });
    return AutoscalingV1.toScale(resp);
  }

  async getReplicationControllerStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}replicationcontrollers/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async replaceReplicationControllerStatus(name: string, body: CoreV1.ReplicationController, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}replicationcontrollers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromReplicationController(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async patchReplicationControllerStatus(name: string, type: c.PatchType, body: CoreV1.ReplicationController | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}replicationcontrollers/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromReplicationController(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toReplicationController(resp);
  }

  async getResourceQuotaList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuotaList(resp);
  }

  async watchResourceQuotaList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toResourceQuota, MetaV1.toStatus));
  }

  async createResourceQuota(body: CoreV1.ResourceQuota, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromResourceQuota(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async deleteResourceQuotaList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourcequotas`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuotaList(resp);
  }

  async getResourceQuota(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async deleteResourceQuota(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}resourcequotas/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async replaceResourceQuota(name: string, body: CoreV1.ResourceQuota, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourcequotas/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromResourceQuota(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async patchResourceQuota(name: string, type: c.PatchType, body: CoreV1.ResourceQuota | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourcequotas/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromResourceQuota(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async getResourceQuotaStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}resourcequotas/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async replaceResourceQuotaStatus(name: string, body: CoreV1.ResourceQuota, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}resourcequotas/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromResourceQuota(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async patchResourceQuotaStatus(name: string, type: c.PatchType, body: CoreV1.ResourceQuota | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}resourcequotas/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromResourceQuota(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toResourceQuota(resp);
  }

  async getSecretList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}secrets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecretList(resp);
  }

  async watchSecretList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}secrets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toSecret, MetaV1.toStatus));
  }

  async createSecret(body: CoreV1.Secret, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}secrets`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromSecret(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecret(resp);
  }

  async deleteSecretList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}secrets`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecretList(resp);
  }

  async getSecret(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}secrets/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecret(resp);
  }

  async deleteSecret(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}secrets/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceSecret(name: string, body: CoreV1.Secret, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}secrets/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromSecret(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecret(resp);
  }

  async patchSecret(name: string, type: c.PatchType, body: CoreV1.Secret | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}secrets/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromSecret(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toSecret(resp);
  }

  async getServiceAccountList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccountList(resp);
  }

  async watchServiceAccountList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toServiceAccount, MetaV1.toStatus));
  }

  async createServiceAccount(body: CoreV1.ServiceAccount, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromServiceAccount(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccount(resp);
  }

  async deleteServiceAccountList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}serviceaccounts`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccountList(resp);
  }

  async getServiceAccount(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}serviceaccounts/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccount(resp);
  }

  async deleteServiceAccount(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}serviceaccounts/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccount(resp);
  }

  async replaceServiceAccount(name: string, body: CoreV1.ServiceAccount, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}serviceaccounts/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromServiceAccount(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccount(resp);
  }

  async patchServiceAccount(name: string, type: c.PatchType, body: CoreV1.ServiceAccount | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}serviceaccounts/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromServiceAccount(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceAccount(resp);
  }

  async createServiceAccountToken(name: string, body: AuthenticationV1.TokenRequest, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}serviceaccounts/${name}/token`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AuthenticationV1.fromTokenRequest(body),
      abortSignal: opts.abortSignal,
    });
    return AuthenticationV1.toTokenRequest(resp);
  }

  async getServiceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceList(resp);
  }

  async watchServiceList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CoreV1.toService, MetaV1.toStatus));
  }

  async createService(body: CoreV1.Service, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}services`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromService(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async deleteServiceList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}services`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toServiceList(resp);
  }

  async getService(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async deleteService(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}services/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async replaceService(name: string, body: CoreV1.Service, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}services/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromService(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async patchService(name: string, type: c.PatchType, body: CoreV1.Service | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}services/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromService(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  proxyServiceRequest(serviceName: string, opts: c.ProxyOptions & {expectStream: true; expectJson: true}): Promise<ReadableStream<c.JSONValue>>;
  proxyServiceRequest(serviceName: string, opts: c.ProxyOptions & {expectStream: true}): Promise<ReadableStream<Uint8Array>>;
  proxyServiceRequest(serviceName: string, opts: c.ProxyOptions & {expectJson: true}): Promise<c.JSONValue>;
  proxyServiceRequest(serviceName: string, opts: c.ProxyOptions): Promise<Uint8Array>;
  async proxyServiceRequest(serviceName: string, opts: c.ProxyOptions): Promise<unknown> {
    if (opts.path && !opts.path.startsWith('/')) throw new Error("Proxy path cannot be relative");
    const name = (opts.port != null) ? `${serviceName}:${opts.port}` : serviceName;
    const path = `${this.#root}services/${name}/proxy${opts.path || ''}`;
    return this.#client.performRequest({ ...opts, path });
  }

  async getServiceStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}services/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async replaceServiceStatus(name: string, body: CoreV1.Service, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}services/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CoreV1.fromService(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

  async patchServiceStatus(name: string, type: c.PatchType, body: CoreV1.Service | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}services/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CoreV1.fromService(body),
      abortSignal: opts.abortSignal,
    });
    return CoreV1.toService(resp);
  }

}
