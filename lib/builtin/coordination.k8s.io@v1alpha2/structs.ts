// Autogenerated Schema file for CoordinationV1alpha2
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates. */
export interface LeaseCandidate {
  apiVersion?: "coordination.k8s.io/v1alpha2";
  kind?: "LeaseCandidate";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: LeaseCandidateSpec | null;
}
export function toLeaseCandidate(input: c.JSONValue): LeaseCandidate & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "coordination.k8s.io/v1alpha2", "LeaseCandidate"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toLeaseCandidateSpec),
  }}
export function fromLeaseCandidate(input: LeaseCandidate): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "coordination.k8s.io/v1alpha2", "LeaseCandidate"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromLeaseCandidateSpec(input.spec) : undefined,
  }}

/** LeaseCandidateSpec is a specification of a Lease. */
export interface LeaseCandidateSpec {
  binaryVersion: string;
  emulationVersion?: string | null;
  leaseName: string;
  pingTime?: c.MicroTime | null;
  renewTime?: c.MicroTime | null;
  strategy: string;
}
export function toLeaseCandidateSpec(input: c.JSONValue): LeaseCandidateSpec {
  const obj = c.checkObj(input);
  return {
    binaryVersion: c.checkStr(obj["binaryVersion"]),
    emulationVersion: c.readOpt(obj["emulationVersion"], c.checkStr),
    leaseName: c.checkStr(obj["leaseName"]),
    pingTime: c.readOpt(obj["pingTime"], c.toMicroTime),
    renewTime: c.readOpt(obj["renewTime"], c.toMicroTime),
    strategy: c.checkStr(obj["strategy"]),
  }}
export function fromLeaseCandidateSpec(input: LeaseCandidateSpec): c.JSONValue {
  return {
    ...input,
    pingTime: input.pingTime != null ? c.fromMicroTime(input.pingTime) : undefined,
    renewTime: input.renewTime != null ? c.fromMicroTime(input.renewTime) : undefined,
  }}

/** LeaseCandidateList is a list of Lease objects. */
export interface LeaseCandidateList extends ListOf<LeaseCandidate> {
  apiVersion?: "coordination.k8s.io/v1alpha2";
  kind?: "LeaseCandidateList";
};
export function toLeaseCandidateList(input: c.JSONValue): LeaseCandidateList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "coordination.k8s.io/v1alpha2", "LeaseCandidateList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toLeaseCandidate),
  }}
