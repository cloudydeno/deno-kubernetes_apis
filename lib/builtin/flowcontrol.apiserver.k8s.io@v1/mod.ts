export * from "./structs.ts";

// Autogenerated API file for FlowcontrolApiserverV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../meta@v1/structs.ts";
import * as FlowcontrolApiserverV1 from "./structs.ts";

export class FlowcontrolApiserverV1Api {
  #client: c.RestClient;
  #root = "/apis/flowcontrol.apiserver.k8s.io/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getFlowSchemaList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}flowschemas`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchemaList(resp);
  }

  async watchFlowSchemaList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}flowschemas`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(FlowcontrolApiserverV1.toFlowSchema, MetaV1.toStatus));
  }

  async createFlowSchema(body: FlowcontrolApiserverV1.FlowSchema, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}flowschemas`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromFlowSchema(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async deleteFlowSchemaList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}flowschemas`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchemaList(resp);
  }

  async getFlowSchema(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}flowschemas/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async deleteFlowSchema(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}flowschemas/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async replaceFlowSchema(name: string, body: FlowcontrolApiserverV1.FlowSchema, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}flowschemas/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromFlowSchema(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async patchFlowSchema(name: string, type: c.PatchType, body: FlowcontrolApiserverV1.FlowSchema | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}flowschemas/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : FlowcontrolApiserverV1.fromFlowSchema(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async getFlowSchemaStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}flowschemas/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async replaceFlowSchemaStatus(name: string, body: FlowcontrolApiserverV1.FlowSchema, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}flowschemas/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromFlowSchema(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async patchFlowSchemaStatus(name: string, type: c.PatchType, body: FlowcontrolApiserverV1.FlowSchema | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}flowschemas/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : FlowcontrolApiserverV1.fromFlowSchema(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toFlowSchema(resp);
  }

  async getPriorityLevelConfigurationList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}prioritylevelconfigurations`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfigurationList(resp);
  }

  async watchPriorityLevelConfigurationList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}prioritylevelconfigurations`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(FlowcontrolApiserverV1.toPriorityLevelConfiguration, MetaV1.toStatus));
  }

  async createPriorityLevelConfiguration(body: FlowcontrolApiserverV1.PriorityLevelConfiguration, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}prioritylevelconfigurations`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromPriorityLevelConfiguration(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async deletePriorityLevelConfigurationList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}prioritylevelconfigurations`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfigurationList(resp);
  }

  async getPriorityLevelConfiguration(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}prioritylevelconfigurations/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async deletePriorityLevelConfiguration(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}prioritylevelconfigurations/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async replacePriorityLevelConfiguration(name: string, body: FlowcontrolApiserverV1.PriorityLevelConfiguration, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}prioritylevelconfigurations/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromPriorityLevelConfiguration(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async patchPriorityLevelConfiguration(name: string, type: c.PatchType, body: FlowcontrolApiserverV1.PriorityLevelConfiguration | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}prioritylevelconfigurations/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : FlowcontrolApiserverV1.fromPriorityLevelConfiguration(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async getPriorityLevelConfigurationStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}prioritylevelconfigurations/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async replacePriorityLevelConfigurationStatus(name: string, body: FlowcontrolApiserverV1.PriorityLevelConfiguration, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}prioritylevelconfigurations/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: FlowcontrolApiserverV1.fromPriorityLevelConfiguration(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

  async patchPriorityLevelConfigurationStatus(name: string, type: c.PatchType, body: FlowcontrolApiserverV1.PriorityLevelConfiguration | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}prioritylevelconfigurations/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : FlowcontrolApiserverV1.fromPriorityLevelConfiguration(body),
      abortSignal: opts.abortSignal,
    });
    return FlowcontrolApiserverV1.toPriorityLevelConfiguration(resp);
  }

}
