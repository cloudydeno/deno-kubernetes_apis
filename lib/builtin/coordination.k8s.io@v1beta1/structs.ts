// Autogenerated Schema file for CoordinationV1beta1
import * as c from "../../common.ts";

import * as MetaV1 from "../meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "coordination.k8s.io/v1beta1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** Lease defines a lease concept. */
export type Lease = Kind<"Lease"> & LeaseFields;
export interface LeaseFields {
  metadata?: MetaV1.ObjectMeta | null;
  spec?: LeaseSpec | null;
}
export function toLeaseFields(input: c.JSONValue): LeaseFields {
  const obj = c.checkObj(input);
  return {
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toLeaseSpec),
  }}
export function toLease(input: c.JSONValue): Lease {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "coordination.k8s.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "Lease") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toLeaseFields(fields),
  }}
export function fromLease(input: Lease): c.JSONValue {
  return {
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    spec: input.spec != null ? fromLeaseSpec(input.spec) : undefined,
  }}

/** LeaseSpec is a specification of a Lease. */
export interface LeaseSpec {
  acquireTime?: c.MicroTime | null;
  holderIdentity?: string | null;
  leaseDurationSeconds?: number | null;
  leaseTransitions?: number | null;
  renewTime?: c.MicroTime | null;
}
export function toLeaseSpec(input: c.JSONValue): LeaseSpec {
  const obj = c.checkObj(input);
  return {
    acquireTime: c.readOpt(obj["acquireTime"], c.toMicroTime),
    holderIdentity: c.readOpt(obj["holderIdentity"], c.checkStr),
    leaseDurationSeconds: c.readOpt(obj["leaseDurationSeconds"], c.checkNum),
    leaseTransitions: c.readOpt(obj["leaseTransitions"], c.checkNum),
    renewTime: c.readOpt(obj["renewTime"], c.toMicroTime),
  }}
export function fromLeaseSpec(input: LeaseSpec): c.JSONValue {
  return {
    ...input,
    acquireTime: input.acquireTime != null ? c.fromMicroTime(input.acquireTime) : undefined,
    renewTime: input.renewTime != null ? c.fromMicroTime(input.renewTime) : undefined,
  }}

/** LeaseList is a list of Lease objects. */
export type LeaseList = Kind<"LeaseList"> & ListOf<LeaseFields>;
export function toLeaseList(input: c.JSONValue): LeaseList {
  const {apiVersion, kind, metadata, items} = c.checkObj(input);
  if (apiVersion !== "coordination.k8s.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "LeaseList") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    metadata: MetaV1.toListMeta(metadata),
    items: c.readList(items, toLeaseFields),
  }}
