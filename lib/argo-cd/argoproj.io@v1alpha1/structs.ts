// Autogenerated Schema file for ArgoprojIoV1alpha1
import * as c from "../../common.ts";

import * as MetaV1 from "../../builtin/meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** Application is a definition of Application resource. */
export interface Application {
  apiVersion?: "argoproj.io/v1alpha1";
  kind?: "Application";
  metadata: MetaV1.ObjectMeta;
  operation?: {
    info?: Array<{
      name: string;
      value: string;
    }> | null;
    initiatedBy?: {
      automated?: boolean | null;
      username?: string | null;
    } | null;
    retry?: {
      backoff?: {
        duration?: string | null;
        factor?: number | null;
        maxDuration?: string | null;
      } | null;
      limit?: number | null;
    } | null;
    sync?: {
      dryRun?: boolean | null;
      manifests?: Array<string> | null;
      prune?: boolean | null;
      resources?: Array<{
        group?: string | null;
        kind: string;
        name: string;
        namespace?: string | null;
      }> | null;
      revision?: string | null;
      source?: {
        chart?: string | null;
        directory?: {
          exclude?: string | null;
          include?: string | null;
          jsonnet?: {
            extVars?: Array<{
              code?: boolean | null;
              name: string;
              value: string;
            }> | null;
            libs?: Array<string> | null;
            tlas?: Array<{
              code?: boolean | null;
              name: string;
              value: string;
            }> | null;
          } | null;
          recurse?: boolean | null;
        } | null;
        helm?: {
          fileParameters?: Array<{
            name?: string | null;
            path?: string | null;
          }> | null;
          parameters?: Array<{
            forceString?: boolean | null;
            name?: string | null;
            value?: string | null;
          }> | null;
          releaseName?: string | null;
          valueFiles?: Array<string> | null;
          values?: string | null;
          version?: string | null;
        } | null;
        ksonnet?: {
          environment?: string | null;
          parameters?: Array<{
            component?: string | null;
            name: string;
            value: string;
          }> | null;
        } | null;
        kustomize?: {
          commonAnnotations?: Record<string,string> | null;
          commonLabels?: Record<string,string> | null;
          forceCommonAnnotations?: boolean | null;
          forceCommonLabels?: boolean | null;
          images?: Array<string> | null;
          namePrefix?: string | null;
          nameSuffix?: string | null;
          version?: string | null;
        } | null;
        path?: string | null;
        plugin?: {
          env?: Array<{
            name: string;
            value: string;
          }> | null;
          name?: string | null;
        } | null;
        repoURL: string;
        targetRevision?: string | null;
      } | null;
      syncOptions?: Array<string> | null;
      syncStrategy?: {
        apply?: {
          force?: boolean | null;
        } | null;
        hook?: {
          force?: boolean | null;
        } | null;
      } | null;
    } | null;
  } | null;
  spec: {
    destination: {
      name?: string | null;
      namespace?: string | null;
      server?: string | null;
    };
    ignoreDifferences?: Array<{
      group?: string | null;
      jqPathExpressions?: Array<string> | null;
      jsonPointers?: Array<string> | null;
      kind: string;
      name?: string | null;
      namespace?: string | null;
    }> | null;
    info?: Array<{
      name: string;
      value: string;
    }> | null;
    project: string;
    revisionHistoryLimit?: number | null;
    source: {
      chart?: string | null;
      directory?: {
        exclude?: string | null;
        include?: string | null;
        jsonnet?: {
          extVars?: Array<{
            code?: boolean | null;
            name: string;
            value: string;
          }> | null;
          libs?: Array<string> | null;
          tlas?: Array<{
            code?: boolean | null;
            name: string;
            value: string;
          }> | null;
        } | null;
        recurse?: boolean | null;
      } | null;
      helm?: {
        fileParameters?: Array<{
          name?: string | null;
          path?: string | null;
        }> | null;
        parameters?: Array<{
          forceString?: boolean | null;
          name?: string | null;
          value?: string | null;
        }> | null;
        releaseName?: string | null;
        valueFiles?: Array<string> | null;
        values?: string | null;
        version?: string | null;
      } | null;
      ksonnet?: {
        environment?: string | null;
        parameters?: Array<{
          component?: string | null;
          name: string;
          value: string;
        }> | null;
      } | null;
      kustomize?: {
        commonAnnotations?: Record<string,string> | null;
        commonLabels?: Record<string,string> | null;
        forceCommonAnnotations?: boolean | null;
        forceCommonLabels?: boolean | null;
        images?: Array<string> | null;
        namePrefix?: string | null;
        nameSuffix?: string | null;
        version?: string | null;
      } | null;
      path?: string | null;
      plugin?: {
        env?: Array<{
          name: string;
          value: string;
        }> | null;
        name?: string | null;
      } | null;
      repoURL: string;
      targetRevision?: string | null;
    };
    syncPolicy?: {
      automated?: {
        allowEmpty?: boolean | null;
        prune?: boolean | null;
        selfHeal?: boolean | null;
      } | null;
      retry?: {
        backoff?: {
          duration?: string | null;
          factor?: number | null;
          maxDuration?: string | null;
        } | null;
        limit?: number | null;
      } | null;
      syncOptions?: Array<string> | null;
    } | null;
  };
  status?: {
    conditions?: Array<{
      lastTransitionTime?: c.Time | null;
      message: string;
      type: string;
    }> | null;
    health?: {
      message?: string | null;
      status?: string | null;
    } | null;
    history?: Array<{
      deployStartedAt?: c.Time | null;
      deployedAt: c.Time;
      id: number;
      revision: string;
      source?: {
        chart?: string | null;
        directory?: {
          exclude?: string | null;
          include?: string | null;
          jsonnet?: {
            extVars?: Array<{
              code?: boolean | null;
              name: string;
              value: string;
            }> | null;
            libs?: Array<string> | null;
            tlas?: Array<{
              code?: boolean | null;
              name: string;
              value: string;
            }> | null;
          } | null;
          recurse?: boolean | null;
        } | null;
        helm?: {
          fileParameters?: Array<{
            name?: string | null;
            path?: string | null;
          }> | null;
          parameters?: Array<{
            forceString?: boolean | null;
            name?: string | null;
            value?: string | null;
          }> | null;
          releaseName?: string | null;
          valueFiles?: Array<string> | null;
          values?: string | null;
          version?: string | null;
        } | null;
        ksonnet?: {
          environment?: string | null;
          parameters?: Array<{
            component?: string | null;
            name: string;
            value: string;
          }> | null;
        } | null;
        kustomize?: {
          commonAnnotations?: Record<string,string> | null;
          commonLabels?: Record<string,string> | null;
          forceCommonAnnotations?: boolean | null;
          forceCommonLabels?: boolean | null;
          images?: Array<string> | null;
          namePrefix?: string | null;
          nameSuffix?: string | null;
          version?: string | null;
        } | null;
        path?: string | null;
        plugin?: {
          env?: Array<{
            name: string;
            value: string;
          }> | null;
          name?: string | null;
        } | null;
        repoURL: string;
        targetRevision?: string | null;
      } | null;
    }> | null;
    observedAt?: c.Time | null;
    operationState?: {
      finishedAt?: c.Time | null;
      message?: string | null;
      operation: {
        info?: Array<{
          name: string;
          value: string;
        }> | null;
        initiatedBy?: {
          automated?: boolean | null;
          username?: string | null;
        } | null;
        retry?: {
          backoff?: {
            duration?: string | null;
            factor?: number | null;
            maxDuration?: string | null;
          } | null;
          limit?: number | null;
        } | null;
        sync?: {
          dryRun?: boolean | null;
          manifests?: Array<string> | null;
          prune?: boolean | null;
          resources?: Array<{
            group?: string | null;
            kind: string;
            name: string;
            namespace?: string | null;
          }> | null;
          revision?: string | null;
          source?: {
            chart?: string | null;
            directory?: {
              exclude?: string | null;
              include?: string | null;
              jsonnet?: {
                extVars?: Array<{
                  code?: boolean | null;
                  name: string;
                  value: string;
                }> | null;
                libs?: Array<string> | null;
                tlas?: Array<{
                  code?: boolean | null;
                  name: string;
                  value: string;
                }> | null;
              } | null;
              recurse?: boolean | null;
            } | null;
            helm?: {
              fileParameters?: Array<{
                name?: string | null;
                path?: string | null;
              }> | null;
              parameters?: Array<{
                forceString?: boolean | null;
                name?: string | null;
                value?: string | null;
              }> | null;
              releaseName?: string | null;
              valueFiles?: Array<string> | null;
              values?: string | null;
              version?: string | null;
            } | null;
            ksonnet?: {
              environment?: string | null;
              parameters?: Array<{
                component?: string | null;
                name: string;
                value: string;
              }> | null;
            } | null;
            kustomize?: {
              commonAnnotations?: Record<string,string> | null;
              commonLabels?: Record<string,string> | null;
              forceCommonAnnotations?: boolean | null;
              forceCommonLabels?: boolean | null;
              images?: Array<string> | null;
              namePrefix?: string | null;
              nameSuffix?: string | null;
              version?: string | null;
            } | null;
            path?: string | null;
            plugin?: {
              env?: Array<{
                name: string;
                value: string;
              }> | null;
              name?: string | null;
            } | null;
            repoURL: string;
            targetRevision?: string | null;
          } | null;
          syncOptions?: Array<string> | null;
          syncStrategy?: {
            apply?: {
              force?: boolean | null;
            } | null;
            hook?: {
              force?: boolean | null;
            } | null;
          } | null;
        } | null;
      };
      phase: string;
      retryCount?: number | null;
      startedAt: c.Time;
      syncResult?: {
        resources?: Array<{
          group: string;
          hookPhase?: string | null;
          hookType?: string | null;
          kind: string;
          message?: string | null;
          name: string;
          namespace: string;
          status?: string | null;
          syncPhase?: string | null;
          version: string;
        }> | null;
        revision: string;
        source?: {
          chart?: string | null;
          directory?: {
            exclude?: string | null;
            include?: string | null;
            jsonnet?: {
              extVars?: Array<{
                code?: boolean | null;
                name: string;
                value: string;
              }> | null;
              libs?: Array<string> | null;
              tlas?: Array<{
                code?: boolean | null;
                name: string;
                value: string;
              }> | null;
            } | null;
            recurse?: boolean | null;
          } | null;
          helm?: {
            fileParameters?: Array<{
              name?: string | null;
              path?: string | null;
            }> | null;
            parameters?: Array<{
              forceString?: boolean | null;
              name?: string | null;
              value?: string | null;
            }> | null;
            releaseName?: string | null;
            valueFiles?: Array<string> | null;
            values?: string | null;
            version?: string | null;
          } | null;
          ksonnet?: {
            environment?: string | null;
            parameters?: Array<{
              component?: string | null;
              name: string;
              value: string;
            }> | null;
          } | null;
          kustomize?: {
            commonAnnotations?: Record<string,string> | null;
            commonLabels?: Record<string,string> | null;
            forceCommonAnnotations?: boolean | null;
            forceCommonLabels?: boolean | null;
            images?: Array<string> | null;
            namePrefix?: string | null;
            nameSuffix?: string | null;
            version?: string | null;
          } | null;
          path?: string | null;
          plugin?: {
            env?: Array<{
              name: string;
              value: string;
            }> | null;
            name?: string | null;
          } | null;
          repoURL: string;
          targetRevision?: string | null;
        } | null;
      } | null;
    } | null;
    reconciledAt?: c.Time | null;
    resources?: Array<{
      group?: string | null;
      health?: {
        message?: string | null;
        status?: string | null;
      } | null;
      hook?: boolean | null;
      kind?: string | null;
      name?: string | null;
      namespace?: string | null;
      requiresPruning?: boolean | null;
      status?: string | null;
      version?: string | null;
    }> | null;
    sourceType?: string | null;
    summary?: {
      externalURLs?: Array<string> | null;
      images?: Array<string> | null;
    } | null;
    sync?: {
      comparedTo?: {
        destination: {
          name?: string | null;
          namespace?: string | null;
          server?: string | null;
        };
        source: {
          chart?: string | null;
          directory?: {
            exclude?: string | null;
            include?: string | null;
            jsonnet?: {
              extVars?: Array<{
                code?: boolean | null;
                name: string;
                value: string;
              }> | null;
              libs?: Array<string> | null;
              tlas?: Array<{
                code?: boolean | null;
                name: string;
                value: string;
              }> | null;
            } | null;
            recurse?: boolean | null;
          } | null;
          helm?: {
            fileParameters?: Array<{
              name?: string | null;
              path?: string | null;
            }> | null;
            parameters?: Array<{
              forceString?: boolean | null;
              name?: string | null;
              value?: string | null;
            }> | null;
            releaseName?: string | null;
            valueFiles?: Array<string> | null;
            values?: string | null;
            version?: string | null;
          } | null;
          ksonnet?: {
            environment?: string | null;
            parameters?: Array<{
              component?: string | null;
              name: string;
              value: string;
            }> | null;
          } | null;
          kustomize?: {
            commonAnnotations?: Record<string,string> | null;
            commonLabels?: Record<string,string> | null;
            forceCommonAnnotations?: boolean | null;
            forceCommonLabels?: boolean | null;
            images?: Array<string> | null;
            namePrefix?: string | null;
            nameSuffix?: string | null;
            version?: string | null;
          } | null;
          path?: string | null;
          plugin?: {
            env?: Array<{
              name: string;
              value: string;
            }> | null;
            name?: string | null;
          } | null;
          repoURL: string;
          targetRevision?: string | null;
        };
      } | null;
      revision?: string | null;
      status: string;
    } | null;
  } | null;
}
export function toApplication(input: c.JSONValue): Application & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "argoproj.io/v1alpha1", "Application"),
    metadata: MetaV1.toObjectMeta(obj["metadata"]),
    operation: c.readOpt(obj["operation"], toApplication_operation),
    spec: toApplication_spec(obj["spec"]),
    status: c.readOpt(obj["status"], toApplication_status),
  }}
export function fromApplication(input: Application): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "argoproj.io/v1alpha1", "Application"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
    status: input.status != null ? {
      ...input.status,
      conditions: input.status.conditions?.map(x => ({
        ...x,
        lastTransitionTime: x.lastTransitionTime != null ? c.fromTime(x.lastTransitionTime) : undefined,
      })),
      history: input.status.history?.map(x => ({
        ...x,
        deployStartedAt: x.deployStartedAt != null ? c.fromTime(x.deployStartedAt) : undefined,
        deployedAt: x.deployedAt != null ? c.fromTime(x.deployedAt) : undefined,
      })),
      observedAt: input.status.observedAt != null ? c.fromTime(input.status.observedAt) : undefined,
      operationState: input.status.operationState != null ? {
        ...input.status.operationState,
        finishedAt: input.status.operationState.finishedAt != null ? c.fromTime(input.status.operationState.finishedAt) : undefined,
        startedAt: input.status.operationState.startedAt != null ? c.fromTime(input.status.operationState.startedAt) : undefined,
      } : undefined,
      reconciledAt: input.status.reconciledAt != null ? c.fromTime(input.status.reconciledAt) : undefined,
    } : undefined,
  }}
export function toApplication_operation(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    info: c.readOpt(obj["info"], x => c.readList(x, toApplication_operation_info)),
    initiatedBy: c.readOpt(obj["initiatedBy"], toApplication_operation_initiatedBy),
    retry: c.readOpt(obj["retry"], toApplication_operation_retry),
    sync: c.readOpt(obj["sync"], toApplication_operation_sync),
  }}
export function toApplication_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destination: toApplication_spec_destination(obj["destination"]),
    ignoreDifferences: c.readOpt(obj["ignoreDifferences"], x => c.readList(x, toApplication_spec_ignoreDifferences)),
    info: c.readOpt(obj["info"], x => c.readList(x, toApplication_spec_info)),
    project: c.checkStr(obj["project"]),
    revisionHistoryLimit: c.readOpt(obj["revisionHistoryLimit"], c.checkNum),
    source: toApplication_spec_source(obj["source"]),
    syncPolicy: c.readOpt(obj["syncPolicy"], toApplication_spec_syncPolicy),
  }}
export function toApplication_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    conditions: c.readOpt(obj["conditions"], x => c.readList(x, toApplication_status_conditions)),
    health: c.readOpt(obj["health"], toApplication_status_health),
    history: c.readOpt(obj["history"], x => c.readList(x, toApplication_status_history)),
    observedAt: c.readOpt(obj["observedAt"], c.toTime),
    operationState: c.readOpt(obj["operationState"], toApplication_status_operationState),
    reconciledAt: c.readOpt(obj["reconciledAt"], c.toTime),
    resources: c.readOpt(obj["resources"], x => c.readList(x, toApplication_status_resources)),
    sourceType: c.readOpt(obj["sourceType"], c.checkStr),
    summary: c.readOpt(obj["summary"], toApplication_status_summary),
    sync: c.readOpt(obj["sync"], toApplication_status_sync),
  }}
export function toApplication_operation_info(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_operation_initiatedBy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    automated: c.readOpt(obj["automated"], c.checkBool),
    username: c.readOpt(obj["username"], c.checkStr),
  }}
export function toApplication_operation_retry(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    backoff: c.readOpt(obj["backoff"], toApplication_operation_retry_backoff),
    limit: c.readOpt(obj["limit"], c.checkNum),
  }}
export function toApplication_operation_sync(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    dryRun: c.readOpt(obj["dryRun"], c.checkBool),
    manifests: c.readOpt(obj["manifests"], x => c.readList(x, c.checkStr)),
    prune: c.readOpt(obj["prune"], c.checkBool),
    resources: c.readOpt(obj["resources"], x => c.readList(x, toApplication_operation_sync_resources)),
    revision: c.readOpt(obj["revision"], c.checkStr),
    source: c.readOpt(obj["source"], toApplication_operation_sync_source),
    syncOptions: c.readOpt(obj["syncOptions"], x => c.readList(x, c.checkStr)),
    syncStrategy: c.readOpt(obj["syncStrategy"], toApplication_operation_sync_syncStrategy),
  }}
export function toApplication_spec_destination(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    server: c.readOpt(obj["server"], c.checkStr),
  }}
export function toApplication_spec_ignoreDifferences(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    jqPathExpressions: c.readOpt(obj["jqPathExpressions"], x => c.readList(x, c.checkStr)),
    jsonPointers: c.readOpt(obj["jsonPointers"], x => c.readList(x, c.checkStr)),
    kind: c.checkStr(obj["kind"]),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
  }}
export function toApplication_spec_info(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_spec_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_spec_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_spec_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_spec_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_spec_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_spec_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_spec_syncPolicy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    automated: c.readOpt(obj["automated"], toApplication_spec_syncPolicy_automated),
    retry: c.readOpt(obj["retry"], toApplication_spec_syncPolicy_retry),
    syncOptions: c.readOpt(obj["syncOptions"], x => c.readList(x, c.checkStr)),
  }}
export function toApplication_status_conditions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    lastTransitionTime: c.readOpt(obj["lastTransitionTime"], c.toTime),
    message: c.checkStr(obj["message"]),
    type: c.checkStr(obj["type"]),
  }}
export function toApplication_status_health(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    message: c.readOpt(obj["message"], c.checkStr),
    status: c.readOpt(obj["status"], c.checkStr),
  }}
export function toApplication_status_history(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    deployStartedAt: c.readOpt(obj["deployStartedAt"], c.toTime),
    deployedAt: c.toTime(obj["deployedAt"]),
    id: c.checkNum(obj["id"]),
    revision: c.checkStr(obj["revision"]),
    source: c.readOpt(obj["source"], toApplication_status_history_source),
  }}
export function toApplication_status_operationState(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    finishedAt: c.readOpt(obj["finishedAt"], c.toTime),
    message: c.readOpt(obj["message"], c.checkStr),
    operation: toApplication_status_operationState_operation(obj["operation"]),
    phase: c.checkStr(obj["phase"]),
    retryCount: c.readOpt(obj["retryCount"], c.checkNum),
    startedAt: c.toTime(obj["startedAt"]),
    syncResult: c.readOpt(obj["syncResult"], toApplication_status_operationState_syncResult),
  }}
export function toApplication_status_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    health: c.readOpt(obj["health"], toApplication_status_resources_health),
    hook: c.readOpt(obj["hook"], c.checkBool),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    requiresPruning: c.readOpt(obj["requiresPruning"], c.checkBool),
    status: c.readOpt(obj["status"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_summary(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    externalURLs: c.readOpt(obj["externalURLs"], x => c.readList(x, c.checkStr)),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
  }}
export function toApplication_status_sync(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    comparedTo: c.readOpt(obj["comparedTo"], toApplication_status_sync_comparedTo),
    revision: c.readOpt(obj["revision"], c.checkStr),
    status: c.checkStr(obj["status"]),
  }}
export function toApplication_operation_retry_backoff(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    duration: c.readOpt(obj["duration"], c.checkStr),
    factor: c.readOpt(obj["factor"], c.checkNum),
    maxDuration: c.readOpt(obj["maxDuration"], c.checkStr),
  }}
export function toApplication_operation_sync_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    kind: c.checkStr(obj["kind"]),
    name: c.checkStr(obj["name"]),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
  }}
export function toApplication_operation_sync_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_operation_sync_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_operation_sync_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_operation_sync_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_operation_sync_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_operation_sync_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_operation_sync_syncStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apply: c.readOpt(obj["apply"], toApplication_operation_sync_syncStrategy_apply),
    hook: c.readOpt(obj["hook"], toApplication_operation_sync_syncStrategy_hook),
  }}
export function toApplication_spec_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_spec_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_spec_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_spec_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_spec_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_spec_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_spec_source_ksonnet_parameters)),
  }}
export function toApplication_spec_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_spec_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_spec_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_spec_syncPolicy_automated(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    allowEmpty: c.readOpt(obj["allowEmpty"], c.checkBool),
    prune: c.readOpt(obj["prune"], c.checkBool),
    selfHeal: c.readOpt(obj["selfHeal"], c.checkBool),
  }}
export function toApplication_spec_syncPolicy_retry(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    backoff: c.readOpt(obj["backoff"], toApplication_spec_syncPolicy_retry_backoff),
    limit: c.readOpt(obj["limit"], c.checkNum),
  }}
export function toApplication_status_history_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_status_history_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_status_history_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_status_history_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_status_history_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_status_history_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_status_operationState_operation(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    info: c.readOpt(obj["info"], x => c.readList(x, toApplication_status_operationState_operation_info)),
    initiatedBy: c.readOpt(obj["initiatedBy"], toApplication_status_operationState_operation_initiatedBy),
    retry: c.readOpt(obj["retry"], toApplication_status_operationState_operation_retry),
    sync: c.readOpt(obj["sync"], toApplication_status_operationState_operation_sync),
  }}
export function toApplication_status_operationState_syncResult(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    resources: c.readOpt(obj["resources"], x => c.readList(x, toApplication_status_operationState_syncResult_resources)),
    revision: c.checkStr(obj["revision"]),
    source: c.readOpt(obj["source"], toApplication_status_operationState_syncResult_source),
  }}
export function toApplication_status_resources_health(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    message: c.readOpt(obj["message"], c.checkStr),
    status: c.readOpt(obj["status"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destination: toApplication_status_sync_comparedTo_destination(obj["destination"]),
    source: toApplication_status_sync_comparedTo_source(obj["source"]),
  }}
export function toApplication_operation_sync_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_operation_sync_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_operation_sync_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_operation_sync_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_operation_sync_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_operation_sync_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_operation_sync_source_ksonnet_parameters)),
  }}
export function toApplication_operation_sync_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_operation_sync_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_operation_sync_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_operation_sync_syncStrategy_apply(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    force: c.readOpt(obj["force"], c.checkBool),
  }}
export function toApplication_operation_sync_syncStrategy_hook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    force: c.readOpt(obj["force"], c.checkBool),
  }}
export function toApplication_spec_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_spec_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_spec_source_directory_jsonnet_tlas)),
  }}
export function toApplication_spec_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_spec_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_spec_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_spec_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_spec_syncPolicy_retry_backoff(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    duration: c.readOpt(obj["duration"], c.checkStr),
    factor: c.readOpt(obj["factor"], c.checkNum),
    maxDuration: c.readOpt(obj["maxDuration"], c.checkStr),
  }}
export function toApplication_status_history_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_status_history_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_status_history_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_status_history_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_history_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_history_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_history_source_ksonnet_parameters)),
  }}
export function toApplication_status_history_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_history_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_status_history_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_info(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_initiatedBy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    automated: c.readOpt(obj["automated"], c.checkBool),
    username: c.readOpt(obj["username"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_retry(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    backoff: c.readOpt(obj["backoff"], toApplication_status_operationState_operation_retry_backoff),
    limit: c.readOpt(obj["limit"], c.checkNum),
  }}
export function toApplication_status_operationState_operation_sync(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    dryRun: c.readOpt(obj["dryRun"], c.checkBool),
    manifests: c.readOpt(obj["manifests"], x => c.readList(x, c.checkStr)),
    prune: c.readOpt(obj["prune"], c.checkBool),
    resources: c.readOpt(obj["resources"], x => c.readList(x, toApplication_status_operationState_operation_sync_resources)),
    revision: c.readOpt(obj["revision"], c.checkStr),
    source: c.readOpt(obj["source"], toApplication_status_operationState_operation_sync_source),
    syncOptions: c.readOpt(obj["syncOptions"], x => c.readList(x, c.checkStr)),
    syncStrategy: c.readOpt(obj["syncStrategy"], toApplication_status_operationState_operation_sync_syncStrategy),
  }}
export function toApplication_status_operationState_syncResult_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.checkStr(obj["group"]),
    hookPhase: c.readOpt(obj["hookPhase"], c.checkStr),
    hookType: c.readOpt(obj["hookType"], c.checkStr),
    kind: c.checkStr(obj["kind"]),
    message: c.readOpt(obj["message"], c.checkStr),
    name: c.checkStr(obj["name"]),
    namespace: c.checkStr(obj["namespace"]),
    status: c.readOpt(obj["status"], c.checkStr),
    syncPhase: c.readOpt(obj["syncPhase"], c.checkStr),
    version: c.checkStr(obj["version"]),
  }}
export function toApplication_status_operationState_syncResult_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_status_operationState_syncResult_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_status_operationState_syncResult_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_status_operationState_syncResult_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_status_operationState_syncResult_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_status_operationState_syncResult_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_destination(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    server: c.readOpt(obj["server"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_status_sync_comparedTo_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_status_sync_comparedTo_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_status_sync_comparedTo_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_status_sync_comparedTo_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_status_sync_comparedTo_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_operation_sync_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_operation_sync_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_operation_sync_source_directory_jsonnet_tlas)),
  }}
export function toApplication_operation_sync_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_operation_sync_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_operation_sync_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_operation_sync_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_spec_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_spec_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_history_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_status_history_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_status_history_source_directory_jsonnet_tlas)),
  }}
export function toApplication_status_history_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_status_history_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_status_history_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_history_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_retry_backoff(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    duration: c.readOpt(obj["duration"], c.checkStr),
    factor: c.readOpt(obj["factor"], c.checkNum),
    maxDuration: c.readOpt(obj["maxDuration"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    kind: c.checkStr(obj["kind"]),
    name: c.checkStr(obj["name"]),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    chart: c.readOpt(obj["chart"], c.checkStr),
    directory: c.readOpt(obj["directory"], toApplication_status_operationState_operation_sync_source_directory),
    helm: c.readOpt(obj["helm"], toApplication_status_operationState_operation_sync_source_helm),
    ksonnet: c.readOpt(obj["ksonnet"], toApplication_status_operationState_operation_sync_source_ksonnet),
    kustomize: c.readOpt(obj["kustomize"], toApplication_status_operationState_operation_sync_source_kustomize),
    path: c.readOpt(obj["path"], c.checkStr),
    plugin: c.readOpt(obj["plugin"], toApplication_status_operationState_operation_sync_source_plugin),
    repoURL: c.checkStr(obj["repoURL"]),
    targetRevision: c.readOpt(obj["targetRevision"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_syncStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apply: c.readOpt(obj["apply"], toApplication_status_operationState_operation_sync_syncStrategy_apply),
    hook: c.readOpt(obj["hook"], toApplication_status_operationState_operation_sync_syncStrategy_hook),
  }}
export function toApplication_status_operationState_syncResult_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_status_operationState_syncResult_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_status_operationState_syncResult_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_status_operationState_syncResult_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_operationState_syncResult_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_operationState_syncResult_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_operationState_syncResult_source_ksonnet_parameters)),
  }}
export function toApplication_status_operationState_syncResult_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_operationState_syncResult_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_status_operationState_syncResult_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_status_sync_comparedTo_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_status_sync_comparedTo_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_status_sync_comparedTo_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_sync_comparedTo_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_sync_comparedTo_source_ksonnet_parameters)),
  }}
export function toApplication_status_sync_comparedTo_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_status_sync_comparedTo_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_operation_sync_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_operation_sync_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_history_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_history_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_sync_source_directory(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exclude: c.readOpt(obj["exclude"], c.checkStr),
    include: c.readOpt(obj["include"], c.checkStr),
    jsonnet: c.readOpt(obj["jsonnet"], toApplication_status_operationState_operation_sync_source_directory_jsonnet),
    recurse: c.readOpt(obj["recurse"], c.checkBool),
  }}
export function toApplication_status_operationState_operation_sync_source_helm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fileParameters: c.readOpt(obj["fileParameters"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_helm_fileParameters)),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_helm_parameters)),
    releaseName: c.readOpt(obj["releaseName"], c.checkStr),
    valueFiles: c.readOpt(obj["valueFiles"], x => c.readList(x, c.checkStr)),
    values: c.readOpt(obj["values"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_source_ksonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    environment: c.readOpt(obj["environment"], c.checkStr),
    parameters: c.readOpt(obj["parameters"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_ksonnet_parameters)),
  }}
export function toApplication_status_operationState_operation_sync_source_kustomize(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    commonAnnotations: c.readOpt(obj["commonAnnotations"], x => c.readMap(x, c.checkStr)),
    commonLabels: c.readOpt(obj["commonLabels"], x => c.readMap(x, c.checkStr)),
    forceCommonAnnotations: c.readOpt(obj["forceCommonAnnotations"], c.checkBool),
    forceCommonLabels: c.readOpt(obj["forceCommonLabels"], c.checkBool),
    images: c.readOpt(obj["images"], x => c.readList(x, c.checkStr)),
    namePrefix: c.readOpt(obj["namePrefix"], c.checkStr),
    nameSuffix: c.readOpt(obj["nameSuffix"], c.checkStr),
    version: c.readOpt(obj["version"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_source_plugin(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_plugin_env)),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_syncStrategy_apply(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    force: c.readOpt(obj["force"], c.checkBool),
  }}
export function toApplication_status_operationState_operation_sync_syncStrategy_hook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    force: c.readOpt(obj["force"], c.checkBool),
  }}
export function toApplication_status_operationState_syncResult_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_status_operationState_syncResult_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_status_operationState_syncResult_source_directory_jsonnet_tlas)),
  }}
export function toApplication_status_operationState_syncResult_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_status_operationState_syncResult_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_status_operationState_syncResult_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_syncResult_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_sync_comparedTo_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_status_sync_comparedTo_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_status_sync_comparedTo_source_directory_jsonnet_tlas)),
  }}
export function toApplication_status_sync_comparedTo_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_status_sync_comparedTo_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_sync_comparedTo_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_sync_source_directory_jsonnet(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    extVars: c.readOpt(obj["extVars"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_directory_jsonnet_extVars)),
    libs: c.readOpt(obj["libs"], x => c.readList(x, c.checkStr)),
    tlas: c.readOpt(obj["tlas"], x => c.readList(x, toApplication_status_operationState_operation_sync_source_directory_jsonnet_tlas)),
  }}
export function toApplication_status_operationState_operation_sync_source_helm_fileParameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    path: c.readOpt(obj["path"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_source_helm_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    forceString: c.readOpt(obj["forceString"], c.checkBool),
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toApplication_status_operationState_operation_sync_source_ksonnet_parameters(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    component: c.readOpt(obj["component"], c.checkStr),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_sync_source_plugin_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_syncResult_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_syncResult_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_sync_comparedTo_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_sync_comparedTo_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_sync_source_directory_jsonnet_extVars(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}
export function toApplication_status_operationState_operation_sync_source_directory_jsonnet_tlas(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    code: c.readOpt(obj["code"], c.checkBool),
    name: c.checkStr(obj["name"]),
    value: c.checkStr(obj["value"]),
  }}

export interface ApplicationList extends ListOf<Application> {
  apiVersion?: "argoproj.io/v1alpha1";
  kind?: "ApplicationList";
};
export function toApplicationList(input: c.JSONValue): ApplicationList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "argoproj.io/v1alpha1", "ApplicationList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toApplication),
  }}

/** AppProject provides a logical grouping of applications, providing controls for: * where the apps may deploy to (cluster whitelist) * what may be deployed (repository whitelist, resource whitelist/blacklist) * who can access these applications (roles, OIDC group claims bindings) * and what they can do (RBAC policies) * automation access to these roles (JWT tokens) */
export interface AppProject {
  apiVersion?: "argoproj.io/v1alpha1";
  kind?: "AppProject";
  metadata: MetaV1.ObjectMeta;
  spec: {
    clusterResourceBlacklist?: Array<{
      group: string;
      kind: string;
    }> | null;
    clusterResourceWhitelist?: Array<{
      group: string;
      kind: string;
    }> | null;
    description?: string | null;
    destinations?: Array<{
      name?: string | null;
      namespace?: string | null;
      server?: string | null;
    }> | null;
    namespaceResourceBlacklist?: Array<{
      group: string;
      kind: string;
    }> | null;
    namespaceResourceWhitelist?: Array<{
      group: string;
      kind: string;
    }> | null;
    orphanedResources?: {
      ignore?: Array<{
        group?: string | null;
        kind?: string | null;
        name?: string | null;
      }> | null;
      warn?: boolean | null;
    } | null;
    roles?: Array<{
      description?: string | null;
      groups?: Array<string> | null;
      jwtTokens?: Array<{
        exp?: number | null;
        iat: number;
        id?: string | null;
      }> | null;
      name: string;
      policies?: Array<string> | null;
    }> | null;
    signatureKeys?: Array<{
      keyID: string;
    }> | null;
    sourceRepos?: Array<string> | null;
    syncWindows?: Array<{
      applications?: Array<string> | null;
      clusters?: Array<string> | null;
      duration?: string | null;
      kind?: string | null;
      manualSync?: boolean | null;
      namespaces?: Array<string> | null;
      schedule?: string | null;
    }> | null;
  };
  status?: {
    jwtTokensByRole?: Record<string,{
      items?: Array<{
        exp?: number | null;
        iat: number;
        id?: string | null;
      }> | null;
    }> | null;
  } | null;
}
export function toAppProject(input: c.JSONValue): AppProject & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "argoproj.io/v1alpha1", "AppProject"),
    metadata: MetaV1.toObjectMeta(obj["metadata"]),
    spec: toAppProject_spec(obj["spec"]),
    status: c.readOpt(obj["status"], toAppProject_status),
  }}
export function fromAppProject(input: AppProject): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "argoproj.io/v1alpha1", "AppProject"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toAppProject_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    clusterResourceBlacklist: c.readOpt(obj["clusterResourceBlacklist"], x => c.readList(x, toAppProject_spec_clusterResourceBlacklist)),
    clusterResourceWhitelist: c.readOpt(obj["clusterResourceWhitelist"], x => c.readList(x, toAppProject_spec_clusterResourceWhitelist)),
    description: c.readOpt(obj["description"], c.checkStr),
    destinations: c.readOpt(obj["destinations"], x => c.readList(x, toAppProject_spec_destinations)),
    namespaceResourceBlacklist: c.readOpt(obj["namespaceResourceBlacklist"], x => c.readList(x, toAppProject_spec_namespaceResourceBlacklist)),
    namespaceResourceWhitelist: c.readOpt(obj["namespaceResourceWhitelist"], x => c.readList(x, toAppProject_spec_namespaceResourceWhitelist)),
    orphanedResources: c.readOpt(obj["orphanedResources"], toAppProject_spec_orphanedResources),
    roles: c.readOpt(obj["roles"], x => c.readList(x, toAppProject_spec_roles)),
    signatureKeys: c.readOpt(obj["signatureKeys"], x => c.readList(x, toAppProject_spec_signatureKeys)),
    sourceRepos: c.readOpt(obj["sourceRepos"], x => c.readList(x, c.checkStr)),
    syncWindows: c.readOpt(obj["syncWindows"], x => c.readList(x, toAppProject_spec_syncWindows)),
  }}
export function toAppProject_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    jwtTokensByRole: c.readOpt(obj["jwtTokensByRole"], x => c.readMap(x, toAppProject_status_jwtTokensByRole)),
  }}
export function toAppProject_spec_clusterResourceBlacklist(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.checkStr(obj["group"]),
    kind: c.checkStr(obj["kind"]),
  }}
export function toAppProject_spec_clusterResourceWhitelist(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.checkStr(obj["group"]),
    kind: c.checkStr(obj["kind"]),
  }}
export function toAppProject_spec_destinations(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    server: c.readOpt(obj["server"], c.checkStr),
  }}
export function toAppProject_spec_namespaceResourceBlacklist(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.checkStr(obj["group"]),
    kind: c.checkStr(obj["kind"]),
  }}
export function toAppProject_spec_namespaceResourceWhitelist(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.checkStr(obj["group"]),
    kind: c.checkStr(obj["kind"]),
  }}
export function toAppProject_spec_orphanedResources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    ignore: c.readOpt(obj["ignore"], x => c.readList(x, toAppProject_spec_orphanedResources_ignore)),
    warn: c.readOpt(obj["warn"], c.checkBool),
  }}
export function toAppProject_spec_roles(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    description: c.readOpt(obj["description"], c.checkStr),
    groups: c.readOpt(obj["groups"], x => c.readList(x, c.checkStr)),
    jwtTokens: c.readOpt(obj["jwtTokens"], x => c.readList(x, toAppProject_spec_roles_jwtTokens)),
    name: c.checkStr(obj["name"]),
    policies: c.readOpt(obj["policies"], x => c.readList(x, c.checkStr)),
  }}
export function toAppProject_spec_signatureKeys(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    keyID: c.checkStr(obj["keyID"]),
  }}
export function toAppProject_spec_syncWindows(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    applications: c.readOpt(obj["applications"], x => c.readList(x, c.checkStr)),
    clusters: c.readOpt(obj["clusters"], x => c.readList(x, c.checkStr)),
    duration: c.readOpt(obj["duration"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    manualSync: c.readOpt(obj["manualSync"], c.checkBool),
    namespaces: c.readOpt(obj["namespaces"], x => c.readList(x, c.checkStr)),
    schedule: c.readOpt(obj["schedule"], c.checkStr),
  }}
export function toAppProject_status_jwtTokensByRole(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    items: c.readOpt(obj["items"], x => c.readList(x, toAppProject_status_jwtTokensByRole_items)),
  }}
export function toAppProject_spec_orphanedResources_ignore(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toAppProject_spec_roles_jwtTokens(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exp: c.readOpt(obj["exp"], c.checkNum),
    iat: c.checkNum(obj["iat"]),
    id: c.readOpt(obj["id"], c.checkStr),
  }}
export function toAppProject_status_jwtTokensByRole_items(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    exp: c.readOpt(obj["exp"], c.checkNum),
    iat: c.checkNum(obj["iat"]),
    id: c.readOpt(obj["id"], c.checkStr),
  }}

export interface AppProjectList extends ListOf<AppProject> {
  apiVersion?: "argoproj.io/v1alpha1";
  kind?: "AppProjectList";
};
export function toAppProjectList(input: c.JSONValue): AppProjectList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "argoproj.io/v1alpha1", "AppProjectList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toAppProject),
  }}
