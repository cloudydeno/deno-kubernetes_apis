export * from "./structs.ts";

// Autogenerated API file for ArgoprojIoV1alpha1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../../builtin/meta@v1/structs.ts";
import * as ArgoprojIoV1alpha1 from "./structs.ts";

export class ArgoprojIoV1alpha1Api {
  #client: c.RestClient;
  #root = "/apis/argoproj.io/v1alpha1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): ArgoprojIoV1alpha1NamespacedApi {
    return new ArgoprojIoV1alpha1NamespacedApi(this.#client, name);
  }
  myNamespace(): ArgoprojIoV1alpha1NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new ArgoprojIoV1alpha1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getApplicationListForAllNamespaces(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applications`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationList(resp);
  }

  async watchApplicationListForAllNamespaces(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.Application & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applications`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toApplication, MetaV1.toStatus));
  }

  async getApplicationSetListForAllNamespaces(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSetList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSetList(resp);
  }

  async watchApplicationSetListForAllNamespaces(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.ApplicationSet & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toApplicationSet, MetaV1.toStatus));
  }

  async getAppProjectListForAllNamespaces(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.AppProjectList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}appprojects`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProjectList(resp);
  }

  async watchAppProjectListForAllNamespaces(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.AppProject & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}appprojects`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toAppProject, MetaV1.toStatus));
  }

}

export class ArgoprojIoV1alpha1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/argoproj.io/v1alpha1/namespaces/${namespace}/`;
  }

  async getApplicationList(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applications`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationList(resp);
  }

  async watchApplicationList(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.Application & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applications`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toApplication, MetaV1.toStatus));
  }

  async createApplication(body: ArgoprojIoV1alpha1.Application, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.Application> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}applications`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromApplication(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplication(resp);
  }

  async deleteApplicationList(opts: operations.DeleteListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}applications`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationList(resp);
  }

  async getApplication(name: string, opts: operations.NoOpts = {}): Promise<ArgoprojIoV1alpha1.Application> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applications/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplication(resp);
  }

  async deleteApplication(name: string, opts: operations.DeleteOpts = {}): Promise<ArgoprojIoV1alpha1.Application | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}applications/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ArgoprojIoV1alpha1.toApplication(resp);
  }

  async replaceApplication(name: string, body: ArgoprojIoV1alpha1.Application, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.Application> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}applications/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromApplication(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplication(resp);
  }

  async patchApplication(name: string, type: c.PatchType, body: ArgoprojIoV1alpha1.Application | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<ArgoprojIoV1alpha1.Application> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}applications/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ArgoprojIoV1alpha1.fromApplication(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplication(resp);
  }

  async getApplicationSetList(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSetList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSetList(resp);
  }

  async watchApplicationSetList(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.ApplicationSet & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toApplicationSet, MetaV1.toStatus));
  }

  async createApplicationSet(body: ArgoprojIoV1alpha1.ApplicationSet, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromApplicationSet(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async deleteApplicationSetList(opts: operations.DeleteListOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSetList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}applicationsets`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSetList(resp);
  }

  async getApplicationSet(name: string, opts: operations.NoOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async deleteApplicationSet(name: string, opts: operations.DeleteOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}applicationsets/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async replaceApplicationSet(name: string, body: ArgoprojIoV1alpha1.ApplicationSet, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}applicationsets/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromApplicationSet(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async patchApplicationSet(name: string, type: c.PatchType, body: ArgoprojIoV1alpha1.ApplicationSet | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}applicationsets/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ArgoprojIoV1alpha1.fromApplicationSet(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async getApplicationSetStatus(name: string, opts: operations.NoOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}applicationsets/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async replaceApplicationSetStatus(name: string, body: ArgoprojIoV1alpha1.ApplicationSet, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}applicationsets/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromApplicationSet(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async patchApplicationSetStatus(name: string, type: c.PatchType, body: ArgoprojIoV1alpha1.ApplicationSet | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<ArgoprojIoV1alpha1.ApplicationSet> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}applicationsets/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ArgoprojIoV1alpha1.fromApplicationSet(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toApplicationSet(resp);
  }

  async getAppProjectList(opts: operations.GetListOpts = {}): Promise<ArgoprojIoV1alpha1.AppProjectList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}appprojects`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProjectList(resp);
  }

  async watchAppProjectList(opts: operations.WatchListOpts = {}): Promise<ReadableStream<c.WatchEvent<ArgoprojIoV1alpha1.AppProject & c.ApiKind, MetaV1.Status & c.ApiKind>>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}appprojects`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(ArgoprojIoV1alpha1.toAppProject, MetaV1.toStatus));
  }

  async createAppProject(body: ArgoprojIoV1alpha1.AppProject, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.AppProject> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}appprojects`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromAppProject(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProject(resp);
  }

  async deleteAppProjectList(opts: operations.DeleteListOpts = {}): Promise<ArgoprojIoV1alpha1.AppProjectList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}appprojects`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProjectList(resp);
  }

  async getAppProject(name: string, opts: operations.NoOpts = {}): Promise<ArgoprojIoV1alpha1.AppProject> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}appprojects/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProject(resp);
  }

  async deleteAppProject(name: string, opts: operations.DeleteOpts = {}): Promise<ArgoprojIoV1alpha1.AppProject | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}appprojects/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return ArgoprojIoV1alpha1.toAppProject(resp);
  }

  async replaceAppProject(name: string, body: ArgoprojIoV1alpha1.AppProject, opts: operations.PutOpts = {}): Promise<ArgoprojIoV1alpha1.AppProject> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}appprojects/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: ArgoprojIoV1alpha1.fromAppProject(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProject(resp);
  }

  async patchAppProject(name: string, type: c.PatchType, body: ArgoprojIoV1alpha1.AppProject | c.JsonPatch, opts: operations.PatchOpts = {}): Promise<ArgoprojIoV1alpha1.AppProject> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}appprojects/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : ArgoprojIoV1alpha1.fromAppProject(body),
      abortSignal: opts.abortSignal,
    });
    return ArgoprojIoV1alpha1.toAppProject(resp);
  }

}
