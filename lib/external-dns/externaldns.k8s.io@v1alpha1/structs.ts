// Autogenerated Schema file for ExternaldnsV1alpha1
import * as c from "../../common.ts";

import * as MetaV1 from "../../builtin/meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

export interface DNSEndpointList {
  apiVersion?: "externaldns.k8s.io/v1alpha1";
  kind?: "DNSEndpoint";
  items: Array<DNSEndpoint>;
  metadata?: MetaV1.ListMeta | null;
}
export function toDNSEndpointList(input: c.JSONValue): DNSEndpointList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "externaldns.k8s.io/v1alpha1", "DNSEndpoint"),
    items: c.readList(obj["items"], toDNSEndpoint),
    metadata: c.readOpt(obj["metadata"], MetaV1.toListMeta),
  }}
export function fromDNSEndpointList(input: DNSEndpointList): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "externaldns.k8s.io/v1alpha1", "DNSEndpoint"),
    ...input,
    items: input.items?.map(fromDNSEndpoint),
    metadata: input.metadata != null ? MetaV1.fromListMeta(input.metadata) : undefined,
  }}

export interface DNSEndpoint {
  apiVersion?: "externaldns.k8s.io/v1alpha1";
  kind?: "DNSEndpoint";
  metadata?: MetaV1.ObjectMeta | null;
  spec?: {
    endpoints?: Array<{
      dnsName?: string | null;
      labels?: {
      } | null;
      providerSpecific?: Array<{
        name?: string | null;
        value?: string | null;
      }> | null;
      recordTTL?: number | null;
      recordType?: string | null;
      targets?: Array<string> | null;
    }> | null;
  } | null;
  status?: {
    observedGeneration?: number | null;
  } | null;
}
export function toDNSEndpoint(input: c.JSONValue): DNSEndpoint & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "externaldns.k8s.io/v1alpha1", "DNSEndpoint"),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: c.readOpt(obj["spec"], toDNSEndpoint_spec),
    status: c.readOpt(obj["status"], toDNSEndpoint_status),
  }}
export function fromDNSEndpoint(input: DNSEndpoint): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "externaldns.k8s.io/v1alpha1", "DNSEndpoint"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toDNSEndpoint_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    endpoints: c.readOpt(obj["endpoints"], x => c.readList(x, toDNSEndpoint_spec_endpoints)),
  }}
export function toDNSEndpoint_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    observedGeneration: c.readOpt(obj["observedGeneration"], c.checkNum),
  }}
export function toDNSEndpoint_spec_endpoints(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    dnsName: c.readOpt(obj["dnsName"], c.checkStr),
    labels: c.readOpt(obj["labels"], toDNSEndpoint_spec_endpoints_labels),
    providerSpecific: c.readOpt(obj["providerSpecific"], x => c.readList(x, toDNSEndpoint_spec_endpoints_providerSpecific)),
    recordTTL: c.readOpt(obj["recordTTL"], c.checkNum),
    recordType: c.readOpt(obj["recordType"], c.checkStr),
    targets: c.readOpt(obj["targets"], x => c.readList(x, c.checkStr)),
  }}
export function toDNSEndpoint_spec_endpoints_labels(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
  }}
export function toDNSEndpoint_spec_endpoints_providerSpecific(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
