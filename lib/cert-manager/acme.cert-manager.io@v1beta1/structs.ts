// Autogenerated Schema file for AcmeCertManagerIoV1beta1
import * as c from "../../common.ts";

import * as MetaV1 from "../../builtin/meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "acme.cert-manager.io/v1beta1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

/** Order is a type to represent an Order with an ACME server */
export type Order = Kind<"Order"> & OrderFields;
export interface OrderFields {
  status?: {
    finalizeURL?: string | null;
    failureTime?: c.Time | null;
    certificate?: string | null;
    authorizations?: Array<{
      wildcard?: boolean | null;
      identifier?: string | null;
      url: string;
      challenges?: Array<{
        url: string;
        token: string;
        type: string;
      }> | null;
      initialState?: "valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue | null;
    }> | null;
    url?: string | null;
    reason?: string | null;
    state?: "valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue | null;
  } | null;
  metadata: MetaV1.ObjectMeta;
  spec: {
    request: string;
    issuerRef: {
      group?: string | null;
      name: string;
      kind?: string | null;
    };
    commonName?: string | null;
    dnsNames: Array<string>;
  };
}
export function toOrderFields(input: c.JSONValue): OrderFields {
  const obj = c.checkObj(input);
  return {
    status: c.readOpt(obj["status"], toOrderFields_status),
    metadata: MetaV1.toObjectMeta(obj["metadata"]),
    spec: toOrderFields_spec(obj["spec"]),
  }}
export function toOrder(input: c.JSONValue): Order {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "acme.cert-manager.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "Order") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toOrderFields(fields),
  }}
export function fromOrder(input: Order): c.JSONValue {
  return {
    ...input,
    status: input.status != null ? {
      ...input.status,
      failureTime: input.status.failureTime != null ? c.fromTime(input.status.failureTime) : undefined,
    } : undefined,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toOrderFields_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    finalizeURL: c.readOpt(obj["finalizeURL"], c.checkStr),
    failureTime: c.readOpt(obj["failureTime"], c.toTime),
    certificate: c.readOpt(obj["certificate"], c.checkStr),
    authorizations: c.readOpt(obj["authorizations"], x => c.readList(x, toOrderFields_status_authorizations)),
    url: c.readOpt(obj["url"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
    state: c.readOpt(obj["state"], (x => c.readEnum<"valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue>(x))),
  }}
export function toOrderFields_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    request: c.checkStr(obj["request"]),
    issuerRef: toOrderFields_spec_issuerRef(obj["issuerRef"]),
    commonName: c.readOpt(obj["commonName"], c.checkStr),
    dnsNames: c.readList(obj["dnsNames"], c.checkStr),
  }}
export function toOrderFields_status_authorizations(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    wildcard: c.readOpt(obj["wildcard"], c.checkBool),
    identifier: c.readOpt(obj["identifier"], c.checkStr),
    url: c.checkStr(obj["url"]),
    challenges: c.readOpt(obj["challenges"], x => c.readList(x, toOrderFields_status_authorizations_challenges)),
    initialState: c.readOpt(obj["initialState"], (x => c.readEnum<"valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue>(x))),
  }}
export function toOrderFields_spec_issuerRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    group: c.readOpt(obj["group"], c.checkStr),
    name: c.checkStr(obj["name"]),
    kind: c.readOpt(obj["kind"], c.checkStr),
  }}
export function toOrderFields_status_authorizations_challenges(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    url: c.checkStr(obj["url"]),
    token: c.checkStr(obj["token"]),
    type: c.checkStr(obj["type"]),
  }}

/** Challenge is a type to represent a Challenge request with an ACME server */
export type Challenge = Kind<"Challenge"> & ChallengeFields;
export interface ChallengeFields {
  spec: {
    solver: {
      dns01?: {
        rfc2136?: {
          tsigAlgorithm?: string | null;
          tsigSecretSecretRef?: {
            key?: string | null;
            name: string;
          } | null;
          tsigKeyName?: string | null;
          nameserver: string;
        } | null;
        webhook?: {
          config?: c.JSONValue | null;
          solverName: string;
          groupName: string;
        } | null;
        digitalocean?: {
          tokenSecretRef: {
            name: string;
            key?: string | null;
          };
        } | null;
        acmeDNS?: {
          host: string;
          accountSecretRef: {
            key?: string | null;
            name: string;
          };
        } | null;
        route53?: {
          secretAccessKeySecretRef?: {
            name: string;
            key?: string | null;
          } | null;
          accessKeyID?: string | null;
          role?: string | null;
          region: string;
          hostedZoneID?: string | null;
        } | null;
        cloudDNS?: {
          project: string;
          serviceAccountSecretRef?: {
            key?: string | null;
            name: string;
          } | null;
          hostedZoneName?: string | null;
        } | null;
        azureDNS?: {
          tenantID?: string | null;
          clientSecretSecretRef?: {
            key?: string | null;
            name: string;
          } | null;
          environment?: "AzurePublicCloud" | "AzureChinaCloud" | "AzureGermanCloud" | "AzureUSGovernmentCloud" | c.UnexpectedEnumValue | null;
          resourceGroupName: string;
          hostedZoneName?: string | null;
          clientID?: string | null;
          subscriptionID: string;
        } | null;
        cloudflare?: {
          apiTokenSecretRef?: {
            name: string;
            key?: string | null;
          } | null;
          apiKeySecretRef?: {
            name: string;
            key?: string | null;
          } | null;
          email?: string | null;
        } | null;
        cnameStrategy?: "None" | "Follow" | c.UnexpectedEnumValue | null;
        akamai?: {
          clientSecretSecretRef: {
            key?: string | null;
            name: string;
          };
          serviceConsumerDomain: string;
          clientTokenSecretRef: {
            key?: string | null;
            name: string;
          };
          accessTokenSecretRef: {
            key?: string | null;
            name: string;
          };
        } | null;
      } | null;
      http01?: {
        ingress?: {
          name?: string | null;
          class?: string | null;
          serviceType?: string | null;
          ingressTemplate?: {
            metadata?: {
              annotations?: Record<string,string> | null;
              labels?: Record<string,string> | null;
            } | null;
          } | null;
          podTemplate?: {
            spec?: {
              nodeSelector?: Record<string,string> | null;
              tolerations?: Array<{
                value?: string | null;
                tolerationSeconds?: number | null;
                key?: string | null;
                effect?: string | null;
                operator?: string | null;
              }> | null;
              affinity?: {
                podAntiAffinity?: {
                  preferredDuringSchedulingIgnoredDuringExecution?: Array<{
                    podAffinityTerm: {
                      topologyKey: string;
                      labelSelector?: {
                        matchLabels?: Record<string,string> | null;
                        matchExpressions?: Array<{
                          values?: Array<string> | null;
                          operator: string;
                          key: string;
                        }> | null;
                      } | null;
                      namespaces?: Array<string> | null;
                    };
                    weight: number;
                  }> | null;
                  requiredDuringSchedulingIgnoredDuringExecution?: Array<{
                    topologyKey: string;
                    labelSelector?: {
                      matchExpressions?: Array<{
                        key: string;
                        operator: string;
                        values?: Array<string> | null;
                      }> | null;
                      matchLabels?: Record<string,string> | null;
                    } | null;
                    namespaces?: Array<string> | null;
                  }> | null;
                } | null;
                podAffinity?: {
                  requiredDuringSchedulingIgnoredDuringExecution?: Array<{
                    namespaces?: Array<string> | null;
                    labelSelector?: {
                      matchExpressions?: Array<{
                        key: string;
                        operator: string;
                        values?: Array<string> | null;
                      }> | null;
                      matchLabels?: Record<string,string> | null;
                    } | null;
                    topologyKey: string;
                  }> | null;
                  preferredDuringSchedulingIgnoredDuringExecution?: Array<{
                    weight: number;
                    podAffinityTerm: {
                      topologyKey: string;
                      namespaces?: Array<string> | null;
                      labelSelector?: {
                        matchLabels?: Record<string,string> | null;
                        matchExpressions?: Array<{
                          values?: Array<string> | null;
                          operator: string;
                          key: string;
                        }> | null;
                      } | null;
                    };
                  }> | null;
                } | null;
                nodeAffinity?: {
                  requiredDuringSchedulingIgnoredDuringExecution?: {
                    nodeSelectorTerms: Array<{
                      matchFields?: Array<{
                        operator: string;
                        values?: Array<string> | null;
                        key: string;
                      }> | null;
                      matchExpressions?: Array<{
                        operator: string;
                        values?: Array<string> | null;
                        key: string;
                      }> | null;
                    }>;
                  } | null;
                  preferredDuringSchedulingIgnoredDuringExecution?: Array<{
                    weight: number;
                    preference: {
                      matchExpressions?: Array<{
                        key: string;
                        values?: Array<string> | null;
                        operator: string;
                      }> | null;
                      matchFields?: Array<{
                        values?: Array<string> | null;
                        operator: string;
                        key: string;
                      }> | null;
                    };
                  }> | null;
                } | null;
              } | null;
            } | null;
            metadata?: {
              labels?: Record<string,string> | null;
              annotations?: Record<string,string> | null;
            } | null;
          } | null;
        } | null;
      } | null;
      selector?: {
        dnsZones?: Array<string> | null;
        matchLabels?: Record<string,string> | null;
        dnsNames?: Array<string> | null;
      } | null;
    };
    token: string;
    key: string;
    authorizationURL: string;
    type: "HTTP-01" | "DNS-01" | c.UnexpectedEnumValue;
    url: string;
    issuerRef: {
      kind?: string | null;
      name: string;
      group?: string | null;
    };
    wildcard?: boolean | null;
    dnsName: string;
  };
  status?: {
    presented?: boolean | null;
    reason?: string | null;
    state?: "valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue | null;
    processing?: boolean | null;
  } | null;
  metadata: MetaV1.ObjectMeta;
}
export function toChallengeFields(input: c.JSONValue): ChallengeFields {
  const obj = c.checkObj(input);
  return {
    spec: toChallengeFields_spec(obj["spec"]),
    status: c.readOpt(obj["status"], toChallengeFields_status),
    metadata: MetaV1.toObjectMeta(obj["metadata"]),
  }}
export function toChallenge(input: c.JSONValue): Challenge {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "acme.cert-manager.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "Challenge") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toChallengeFields(fields),
  }}
export function fromChallenge(input: Challenge): c.JSONValue {
  return {
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toChallengeFields_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    solver: toChallengeFields_spec_solver(obj["solver"]),
    token: c.checkStr(obj["token"]),
    key: c.checkStr(obj["key"]),
    authorizationURL: c.checkStr(obj["authorizationURL"]),
    type: (x => c.readEnum<"HTTP-01" | "DNS-01" | c.UnexpectedEnumValue>(x))(obj["type"]),
    url: c.checkStr(obj["url"]),
    issuerRef: toChallengeFields_spec_issuerRef(obj["issuerRef"]),
    wildcard: c.readOpt(obj["wildcard"], c.checkBool),
    dnsName: c.checkStr(obj["dnsName"]),
  }}
export function toChallengeFields_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    presented: c.readOpt(obj["presented"], c.checkBool),
    reason: c.readOpt(obj["reason"], c.checkStr),
    state: c.readOpt(obj["state"], (x => c.readEnum<"valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored" | c.UnexpectedEnumValue>(x))),
    processing: c.readOpt(obj["processing"], c.checkBool),
  }}
export function toChallengeFields_spec_solver(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    dns01: c.readOpt(obj["dns01"], toChallengeFields_spec_solver_dns01),
    http01: c.readOpt(obj["http01"], toChallengeFields_spec_solver_http01),
    selector: c.readOpt(obj["selector"], toChallengeFields_spec_solver_selector),
  }}
export function toChallengeFields_spec_issuerRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.checkStr(obj["name"]),
    group: c.readOpt(obj["group"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    rfc2136: c.readOpt(obj["rfc2136"], toChallengeFields_spec_solver_dns01_rfc2136),
    webhook: c.readOpt(obj["webhook"], toChallengeFields_spec_solver_dns01_webhook),
    digitalocean: c.readOpt(obj["digitalocean"], toChallengeFields_spec_solver_dns01_digitalocean),
    acmeDNS: c.readOpt(obj["acmeDNS"], toChallengeFields_spec_solver_dns01_acmeDNS),
    route53: c.readOpt(obj["route53"], toChallengeFields_spec_solver_dns01_route53),
    cloudDNS: c.readOpt(obj["cloudDNS"], toChallengeFields_spec_solver_dns01_cloudDNS),
    azureDNS: c.readOpt(obj["azureDNS"], toChallengeFields_spec_solver_dns01_azureDNS),
    cloudflare: c.readOpt(obj["cloudflare"], toChallengeFields_spec_solver_dns01_cloudflare),
    cnameStrategy: c.readOpt(obj["cnameStrategy"], (x => c.readEnum<"None" | "Follow" | c.UnexpectedEnumValue>(x))),
    akamai: c.readOpt(obj["akamai"], toChallengeFields_spec_solver_dns01_akamai),
  }}
export function toChallengeFields_spec_solver_http01(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    ingress: c.readOpt(obj["ingress"], toChallengeFields_spec_solver_http01_ingress),
  }}
export function toChallengeFields_spec_solver_selector(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    dnsZones: c.readOpt(obj["dnsZones"], x => c.readList(x, c.checkStr)),
    matchLabels: c.readOpt(obj["matchLabels"], x => c.readMap(x, c.checkStr)),
    dnsNames: c.readOpt(obj["dnsNames"], x => c.readList(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_dns01_rfc2136(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    tsigAlgorithm: c.readOpt(obj["tsigAlgorithm"], c.checkStr),
    tsigSecretSecretRef: c.readOpt(obj["tsigSecretSecretRef"], toChallengeFields_spec_solver_dns01_rfc2136_tsigSecretSecretRef),
    tsigKeyName: c.readOpt(obj["tsigKeyName"], c.checkStr),
    nameserver: c.checkStr(obj["nameserver"]),
  }}
export function toChallengeFields_spec_solver_dns01_webhook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    config: c.readOpt(obj["config"], c.identity),
    solverName: c.checkStr(obj["solverName"]),
    groupName: c.checkStr(obj["groupName"]),
  }}
export function toChallengeFields_spec_solver_dns01_digitalocean(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    tokenSecretRef: toChallengeFields_spec_solver_dns01_digitalocean_tokenSecretRef(obj["tokenSecretRef"]),
  }}
export function toChallengeFields_spec_solver_dns01_acmeDNS(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    host: c.checkStr(obj["host"]),
    accountSecretRef: toChallengeFields_spec_solver_dns01_acmeDNS_accountSecretRef(obj["accountSecretRef"]),
  }}
export function toChallengeFields_spec_solver_dns01_route53(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    secretAccessKeySecretRef: c.readOpt(obj["secretAccessKeySecretRef"], toChallengeFields_spec_solver_dns01_route53_secretAccessKeySecretRef),
    accessKeyID: c.readOpt(obj["accessKeyID"], c.checkStr),
    role: c.readOpt(obj["role"], c.checkStr),
    region: c.checkStr(obj["region"]),
    hostedZoneID: c.readOpt(obj["hostedZoneID"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_cloudDNS(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    project: c.checkStr(obj["project"]),
    serviceAccountSecretRef: c.readOpt(obj["serviceAccountSecretRef"], toChallengeFields_spec_solver_dns01_cloudDNS_serviceAccountSecretRef),
    hostedZoneName: c.readOpt(obj["hostedZoneName"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_azureDNS(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    tenantID: c.readOpt(obj["tenantID"], c.checkStr),
    clientSecretSecretRef: c.readOpt(obj["clientSecretSecretRef"], toChallengeFields_spec_solver_dns01_azureDNS_clientSecretSecretRef),
    environment: c.readOpt(obj["environment"], (x => c.readEnum<"AzurePublicCloud" | "AzureChinaCloud" | "AzureGermanCloud" | "AzureUSGovernmentCloud" | c.UnexpectedEnumValue>(x))),
    resourceGroupName: c.checkStr(obj["resourceGroupName"]),
    hostedZoneName: c.readOpt(obj["hostedZoneName"], c.checkStr),
    clientID: c.readOpt(obj["clientID"], c.checkStr),
    subscriptionID: c.checkStr(obj["subscriptionID"]),
  }}
export function toChallengeFields_spec_solver_dns01_cloudflare(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiTokenSecretRef: c.readOpt(obj["apiTokenSecretRef"], toChallengeFields_spec_solver_dns01_cloudflare_apiTokenSecretRef),
    apiKeySecretRef: c.readOpt(obj["apiKeySecretRef"], toChallengeFields_spec_solver_dns01_cloudflare_apiKeySecretRef),
    email: c.readOpt(obj["email"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_akamai(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    clientSecretSecretRef: toChallengeFields_spec_solver_dns01_akamai_clientSecretSecretRef(obj["clientSecretSecretRef"]),
    serviceConsumerDomain: c.checkStr(obj["serviceConsumerDomain"]),
    clientTokenSecretRef: toChallengeFields_spec_solver_dns01_akamai_clientTokenSecretRef(obj["clientTokenSecretRef"]),
    accessTokenSecretRef: toChallengeFields_spec_solver_dns01_akamai_accessTokenSecretRef(obj["accessTokenSecretRef"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
    class: c.readOpt(obj["class"], c.checkStr),
    serviceType: c.readOpt(obj["serviceType"], c.checkStr),
    ingressTemplate: c.readOpt(obj["ingressTemplate"], toChallengeFields_spec_solver_http01_ingress_ingressTemplate),
    podTemplate: c.readOpt(obj["podTemplate"], toChallengeFields_spec_solver_http01_ingress_podTemplate),
  }}
export function toChallengeFields_spec_solver_dns01_rfc2136_tsigSecretSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_digitalocean_tokenSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    key: c.readOpt(obj["key"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_acmeDNS_accountSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_route53_secretAccessKeySecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    key: c.readOpt(obj["key"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_cloudDNS_serviceAccountSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_azureDNS_clientSecretSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_cloudflare_apiTokenSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    key: c.readOpt(obj["key"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_cloudflare_apiKeySecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    key: c.readOpt(obj["key"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_dns01_akamai_clientSecretSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_akamai_clientTokenSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_dns01_akamai_accessTokenSecretRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.readOpt(obj["key"], c.checkStr),
    name: c.checkStr(obj["name"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_ingressTemplate(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    metadata: c.readOpt(obj["metadata"], toChallengeFields_spec_solver_http01_ingress_ingressTemplate_metadata),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    spec: c.readOpt(obj["spec"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec),
    metadata: c.readOpt(obj["metadata"], toChallengeFields_spec_solver_http01_ingress_podTemplate_metadata),
  }}
export function toChallengeFields_spec_solver_http01_ingress_ingressTemplate_metadata(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    annotations: c.readOpt(obj["annotations"], x => c.readMap(x, c.checkStr)),
    labels: c.readOpt(obj["labels"], x => c.readMap(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    nodeSelector: c.readOpt(obj["nodeSelector"], x => c.readMap(x, c.checkStr)),
    tolerations: c.readOpt(obj["tolerations"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_tolerations)),
    affinity: c.readOpt(obj["affinity"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_metadata(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    labels: c.readOpt(obj["labels"], x => c.readMap(x, c.checkStr)),
    annotations: c.readOpt(obj["annotations"], x => c.readMap(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_tolerations(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    value: c.readOpt(obj["value"], c.checkStr),
    tolerationSeconds: c.readOpt(obj["tolerationSeconds"], c.checkNum),
    key: c.readOpt(obj["key"], c.checkStr),
    effect: c.readOpt(obj["effect"], c.checkStr),
    operator: c.readOpt(obj["operator"], c.checkStr),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    podAntiAffinity: c.readOpt(obj["podAntiAffinity"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity),
    podAffinity: c.readOpt(obj["podAffinity"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity),
    nodeAffinity: c.readOpt(obj["nodeAffinity"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    preferredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["preferredDuringSchedulingIgnoredDuringExecution"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution)),
    requiredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["requiredDuringSchedulingIgnoredDuringExecution"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    requiredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["requiredDuringSchedulingIgnoredDuringExecution"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution)),
    preferredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["preferredDuringSchedulingIgnoredDuringExecution"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    requiredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["requiredDuringSchedulingIgnoredDuringExecution"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution),
    preferredDuringSchedulingIgnoredDuringExecution: c.readOpt(obj["preferredDuringSchedulingIgnoredDuringExecution"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    podAffinityTerm: toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm(obj["podAffinityTerm"]),
    weight: c.checkNum(obj["weight"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    topologyKey: c.checkStr(obj["topologyKey"]),
    labelSelector: c.readOpt(obj["labelSelector"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector),
    namespaces: c.readOpt(obj["namespaces"], x => c.readList(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    namespaces: c.readOpt(obj["namespaces"], x => c.readList(x, c.checkStr)),
    labelSelector: c.readOpt(obj["labelSelector"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector),
    topologyKey: c.checkStr(obj["topologyKey"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    weight: c.checkNum(obj["weight"]),
    podAffinityTerm: toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm(obj["podAffinityTerm"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    nodeSelectorTerms: c.readList(obj["nodeSelectorTerms"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    weight: c.checkNum(obj["weight"]),
    preference: toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference(obj["preference"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    topologyKey: c.checkStr(obj["topologyKey"]),
    labelSelector: c.readOpt(obj["labelSelector"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector),
    namespaces: c.readOpt(obj["namespaces"], x => c.readList(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions)),
    matchLabels: c.readOpt(obj["matchLabels"], x => c.readMap(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions)),
    matchLabels: c.readOpt(obj["matchLabels"], x => c.readMap(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    topologyKey: c.checkStr(obj["topologyKey"]),
    namespaces: c.readOpt(obj["namespaces"], x => c.readList(x, c.checkStr)),
    labelSelector: c.readOpt(obj["labelSelector"], toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchFields: c.readOpt(obj["matchFields"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchFields)),
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference_matchExpressions)),
    matchFields: c.readOpt(obj["matchFields"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference_matchFields)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchLabels: c.readOpt(obj["matchLabels"], x => c.readMap(x, c.checkStr)),
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector_matchExpressions)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    operator: c.checkStr(obj["operator"]),
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_requiredDuringSchedulingIgnoredDuringExecution_labelSelector_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    operator: c.checkStr(obj["operator"]),
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    matchLabels: c.readOpt(obj["matchLabels"], x => c.readMap(x, c.checkStr)),
    matchExpressions: c.readOpt(obj["matchExpressions"], x => c.readList(x, toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector_matchExpressions)),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchFields(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    operator: c.checkStr(obj["operator"]),
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    key: c.checkStr(obj["key"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_requiredDuringSchedulingIgnoredDuringExecution_nodeSelectorTerms_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    operator: c.checkStr(obj["operator"]),
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    key: c.checkStr(obj["key"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    operator: c.checkStr(obj["operator"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_nodeAffinity_preferredDuringSchedulingIgnoredDuringExecution_preference_matchFields(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    operator: c.checkStr(obj["operator"]),
    key: c.checkStr(obj["key"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAntiAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    operator: c.checkStr(obj["operator"]),
    key: c.checkStr(obj["key"]),
  }}
export function toChallengeFields_spec_solver_http01_ingress_podTemplate_spec_affinity_podAffinity_preferredDuringSchedulingIgnoredDuringExecution_podAffinityTerm_labelSelector_matchExpressions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    values: c.readOpt(obj["values"], x => c.readList(x, c.checkStr)),
    operator: c.checkStr(obj["operator"]),
    key: c.checkStr(obj["key"]),
  }}

/** ChallengeList is a list of Challenge */
export type ChallengeList = Kind<"ChallengeList"> & ListOf<ChallengeFields>;
export function toChallengeList(input: c.JSONValue): ChallengeList {
  const {apiVersion, kind, metadata, items} = c.checkObj(input);
  if (apiVersion !== "acme.cert-manager.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "ChallengeList") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    metadata: MetaV1.toListMeta(metadata),
    items: c.readList(items, toChallengeFields),
  }}

/** OrderList is a list of Order */
export type OrderList = Kind<"OrderList"> & ListOf<OrderFields>;
export function toOrderList(input: c.JSONValue): OrderList {
  const {apiVersion, kind, metadata, items} = c.checkObj(input);
  if (apiVersion !== "acme.cert-manager.io/v1beta1") throw new Error("Type apiv mis 2");
  if (kind !== "OrderList") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    metadata: MetaV1.toListMeta(metadata),
    items: c.readList(items, toOrderFields),
  }}
