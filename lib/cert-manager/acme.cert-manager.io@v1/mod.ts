export * from "./structs.ts";

// Autogenerated API file for AcmeCertManagerIoV1
import * as c from "../../common.ts";
import * as operations from "../../operations.ts";
import * as MetaV1 from "../../builtin/meta@v1/structs.ts";
import * as AcmeCertManagerIoV1 from "./structs.ts";

export class AcmeCertManagerIoV1Api {
  #client: c.RestClient;
  #root = "/apis/acme.cert-manager.io/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string): AcmeCertManagerIoV1NamespacedApi {
    return new AcmeCertManagerIoV1NamespacedApi(this.#client, name);
  }
  myNamespace(): AcmeCertManagerIoV1NamespacedApi {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new AcmeCertManagerIoV1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getChallengeListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<AcmeCertManagerIoV1.ChallengeList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallengeList(resp);
  }

  async watchChallengeListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AcmeCertManagerIoV1.Challenge>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AcmeCertManagerIoV1.toChallenge, MetaV1.toStatus));
  }

  async getOrderListForAllNamespaces(
    opts: operations.GetListOpts = {},
  ): Promise<AcmeCertManagerIoV1.OrderList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrderList(resp);
  }

  async watchOrderListForAllNamespaces(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AcmeCertManagerIoV1.Order>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AcmeCertManagerIoV1.toOrder, MetaV1.toStatus));
  }

}

export class AcmeCertManagerIoV1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/acme.cert-manager.io/v1/namespaces/${namespace}/`;
  }

  async getChallengeList(
    opts: operations.GetListOpts = {},
  ): Promise<AcmeCertManagerIoV1.ChallengeList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallengeList(resp);
  }

  async watchChallengeList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AcmeCertManagerIoV1.Challenge>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AcmeCertManagerIoV1.toChallenge, MetaV1.toStatus));
  }

  async createChallenge(
    body: AcmeCertManagerIoV1.Challenge,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}challenges`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromChallenge(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async deleteChallengeList(
    opts: operations.DeleteListOpts = {},
  ): Promise<AcmeCertManagerIoV1.ChallengeList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}challenges`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallengeList(resp);
  }

  async getChallenge(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async deleteChallenge(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}challenges/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async replaceChallenge(
    name: string,
    body: AcmeCertManagerIoV1.Challenge,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}challenges/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromChallenge(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async patchChallenge(
    name: string,
    type: c.PatchType,
    body: AcmeCertManagerIoV1.Challenge | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}challenges/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AcmeCertManagerIoV1.fromChallenge(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async getChallengeStatus(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}challenges/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async replaceChallengeStatus(
    name: string,
    body: AcmeCertManagerIoV1.Challenge,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}challenges/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromChallenge(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async patchChallengeStatus(
    name: string,
    type: c.PatchType,
    body: AcmeCertManagerIoV1.Challenge | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AcmeCertManagerIoV1.Challenge> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}challenges/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AcmeCertManagerIoV1.fromChallenge(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toChallenge(resp);
  }

  async getOrderList(
    opts: operations.GetListOpts = {},
  ): Promise<AcmeCertManagerIoV1.OrderList> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrderList(resp);
  }

  async watchOrderList(
    opts: operations.WatchListOpts = {},
  ): Promise<c.WatchEventStream<AcmeCertManagerIoV1.Order>> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(AcmeCertManagerIoV1.toOrder, MetaV1.toStatus));
  }

  async createOrder(
    body: AcmeCertManagerIoV1.Order,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}orders`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromOrder(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async deleteOrderList(
    opts: operations.DeleteListOpts = {},
  ): Promise<AcmeCertManagerIoV1.OrderList> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}orders`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrderList(resp);
  }

  async getOrder(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async deleteOrder(
    name: string,
    opts: operations.DeleteOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order | MetaV1.Status> {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}orders/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async replaceOrder(
    name: string,
    body: AcmeCertManagerIoV1.Order,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}orders/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromOrder(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async patchOrder(
    name: string,
    type: c.PatchType,
    body: AcmeCertManagerIoV1.Order | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}orders/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AcmeCertManagerIoV1.fromOrder(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async getOrderStatus(
    name: string,
    opts: operations.NoOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}orders/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async replaceOrderStatus(
    name: string,
    body: AcmeCertManagerIoV1.Order,
    opts: operations.PutOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}orders/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: AcmeCertManagerIoV1.fromOrder(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

  async patchOrderStatus(
    name: string,
    type: c.PatchType,
    body: AcmeCertManagerIoV1.Order | c.JsonPatch,
    opts: operations.PatchOpts = {},
  ): Promise<AcmeCertManagerIoV1.Order> {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}orders/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : AcmeCertManagerIoV1.fromOrder(body),
      abortSignal: opts.abortSignal,
    });
    return AcmeCertManagerIoV1.toOrder(resp);
  }

}
